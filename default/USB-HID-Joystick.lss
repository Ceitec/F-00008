
USB-HID-Joystick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000071c  000007b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000071c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003d  00800102  00800102  000007b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000828  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d53  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000567  00000000  00000000  000015f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ea  00000000  00000000  00001b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00002044  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053a  00000000  00000000  000020d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008bf  00000000  00000000  0000260a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00002ec9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 98 00 	jmp	0x130	; 0x130 <__ctors_end>
   4:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_1>
   8:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
   c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  10:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  14:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  18:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  1c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  20:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  24:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  28:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  2c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  30:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  34:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  38:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  3c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  40:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  44:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  48:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  4c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  50:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  54:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  58:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  5c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  60:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  64:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  68:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  6c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  70:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  74:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
  78:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>

0000007c <__trampolines_end>:
  7c:	05 01       	movw	r0, r10
  7e:	09 04       	cpc	r0, r9
  80:	a1 01       	movw	r20, r2
  82:	09 01       	movw	r0, r18
  84:	a1 00       	.word	0x00a1	; ????
  86:	85 01       	movw	r16, r10
  88:	05 09       	sbc	r16, r5
  8a:	19 01       	movw	r2, r18
  8c:	29 08       	sbc	r2, r9
  8e:	15 00       	.word	0x0015	; ????
  90:	25 01       	movw	r4, r10
  92:	75 01       	movw	r14, r10
  94:	95 08       	sbc	r9, r5
  96:	81 02       	muls	r24, r17
  98:	09 30       	cpi	r16, 0x09	; 9
  9a:	09 31       	cpi	r16, 0x19	; 25
  9c:	09 32       	cpi	r16, 0x29	; 41
  9e:	09 38       	cpi	r16, 0x89	; 137
  a0:	15 00       	.word	0x0015	; ????
  a2:	25 7f       	andi	r18, 0xF5	; 245
  a4:	75 08       	sbc	r7, r5
  a6:	95 04       	cpc	r9, r5
  a8:	81 02       	muls	r24, r17
  aa:	c0 c0       	rjmp	.+384    	; 0x22c <unstuff5+0x4>

000000ac <usbDescriptorConfiguration>:
  ac:	09 02 22 00 01 01 00 80 32 09 04 00 00 01 03 00     ..".....2.......
  bc:	01 00 09 21 01 01 05 01 22 30 00 07 05 81 03 08     ...!...."0......
  cc:	00 64                                               .d

000000ce <usbDescriptorDevice>:
  ce:	12 01 10 01 00 00 00 08 c0 16 dc 05 00 01 01 02     ................
  de:	03 01                                               ..

000000e0 <usbDescriptorStringSerialNumber>:
  e0:	12 03 55 00 53 00 42 00 41 00 30 00 30 00 30 00     ..U.S.B.A.0.0.0.
  f0:	30 00                                               0.

000000f2 <usbDescriptorStringDevice>:
  f2:	22 03 55 00 53 00 42 00 20 00 48 00 49 00 44 00     ".U.S.B. .H.I.D.
 102:	20 00 4a 00 6f 00 79 00 73 00 74 00 69 00 63 00      .J.o.y.s.t.i.c.
 112:	6b 00                                               k.

00000114 <usbDescriptorStringVendor>:
 114:	18 03 41 00 74 00 6f 00 6d 00 20 00 54 00 72 00     ..A.t.o.m. .T.r.
 124:	61 00 63 00 65 00 a9 00                             a.c.e...

0000012c <usbDescriptorString0>:
 12c:	04 03 09 04                                         ....

00000130 <__ctors_end>:
 130:	11 24       	eor	r1, r1
 132:	1f be       	out	0x3f, r1	; 63
 134:	cf ef       	ldi	r28, 0xFF	; 255
 136:	d0 e1       	ldi	r29, 0x10	; 16
 138:	de bf       	out	0x3e, r29	; 62
 13a:	cd bf       	out	0x3d, r28	; 61

0000013c <__do_copy_data>:
 13c:	11 e0       	ldi	r17, 0x01	; 1
 13e:	a0 e0       	ldi	r26, 0x00	; 0
 140:	b1 e0       	ldi	r27, 0x01	; 1
 142:	ec e1       	ldi	r30, 0x1C	; 28
 144:	f7 e0       	ldi	r31, 0x07	; 7
 146:	02 c0       	rjmp	.+4      	; 0x14c <__do_copy_data+0x10>
 148:	05 90       	lpm	r0, Z+
 14a:	0d 92       	st	X+, r0
 14c:	a2 30       	cpi	r26, 0x02	; 2
 14e:	b1 07       	cpc	r27, r17
 150:	d9 f7       	brne	.-10     	; 0x148 <__do_copy_data+0xc>

00000152 <__do_clear_bss>:
 152:	21 e0       	ldi	r18, 0x01	; 1
 154:	a2 e0       	ldi	r26, 0x02	; 2
 156:	b1 e0       	ldi	r27, 0x01	; 1
 158:	01 c0       	rjmp	.+2      	; 0x15c <.do_clear_bss_start>

0000015a <.do_clear_bss_loop>:
 15a:	1d 92       	st	X+, r1

0000015c <.do_clear_bss_start>:
 15c:	af 33       	cpi	r26, 0x3F	; 63
 15e:	b2 07       	cpc	r27, r18
 160:	e1 f7       	brne	.-8      	; 0x15a <.do_clear_bss_loop>
 162:	0e 94 2b 02 	call	0x456	; 0x456 <main>
 166:	0c 94 8c 03 	jmp	0x718	; 0x718 <_exit>

0000016a <__bad_interrupt>:
 16a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000016e <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
 16e:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
 170:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
 172:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
 174:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
 176:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
 178:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
 17a:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
 17c:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
 17e:	09 c0       	rjmp	.+18     	; 0x192 <usbCrcLoopEntry>

00000180 <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
 180:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
 182:	82 27       	eor	r24, r18

00000184 <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 184:	97 95       	ror	r25
    ror     resCrcL
 186:	87 95       	ror	r24
    brcs    usbCrcNoXor
 188:	10 f0       	brcs	.+4      	; 0x18e <usbCrcNoXor>
    eor     resCrcL, polyL
 18a:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 18c:	95 27       	eor	r25, r21

0000018e <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 18e:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 190:	c8 f3       	brcs	.-14     	; 0x184 <usbCrcBitLoop>

00000192 <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 192:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 194:	a8 f3       	brcs	.-22     	; 0x180 <usbCrcByteLoop>

00000196 <usbCrcReady>:
usbCrcReady:
    ret
 196:	08 95       	ret

00000198 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 198:	ea df       	rcall	.-44     	; 0x16e <usbCrc16>
    st      ptr+, resCrcL
 19a:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 19c:	9d 93       	st	X+, r25
    ret
 19e:	08 95       	ret

000001a0 <__vector_1>:
;max allowable interrupt latency: 34 cycles -> max 25 cycles interrupt disable
;max stack usage: [ret(2), YL, SREG, YH, shift, x1, x2, x3, cnt, x4] = 11 bytes
;Numbers in brackets are maximum cycles since SOF.
USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], YH, shift, x1, x2, x3, cnt
    push    YL              ;2 [35] push only what is necessary to sync with edge ASAP
 1a0:	cf 93       	push	r28
    in      YL, SREG        ;1 [37]
 1a2:	cf b7       	in	r28, 0x3f	; 63
    push    YL              ;2 [39]
 1a4:	cf 93       	push	r28

000001a6 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 1a6:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 1a8:	4c 9b       	sbis	0x09, 4	; 9
    brne    waitForJ        ; just make sure we have ANY timeout
 1aa:	e9 f7       	brne	.-6      	; 0x1a6 <waitForJ>

000001ac <waitForK>:
waitForK:
;The following code results in a sampling window of 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS
 1ac:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 1ae:	09 c0       	rjmp	.+18     	; 0x1c2 <foundK>
    sbis    USBIN, USBMINUS
 1b0:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 1b2:	07 c0       	rjmp	.+14     	; 0x1c2 <foundK>
    sbis    USBIN, USBMINUS
 1b4:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <foundK>
    sbis    USBIN, USBMINUS
 1b8:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 1ba:	03 c0       	rjmp	.+6      	; 0x1c2 <foundK>
    sbis    USBIN, USBMINUS
 1bc:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 1be:	01 c0       	rjmp	.+2      	; 0x1c2 <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 1c0:	a3 c0       	rjmp	.+326    	; 0x308 <sofError>

000001c2 <foundK>:
foundK:
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 4 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    YH                  ;2 [2]
 1c2:	df 93       	push	r29
    lds     YL, usbInputBufOffset;2 [4]
 1c4:	c0 91 22 01 	lds	r28, 0x0122
    clr     YH                  ;1 [5]
 1c8:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));1 [6]
 1ca:	c7 5d       	subi	r28, 0xD7	; 215
    sbci    YH, hi8(-(usbRxBuf));1 [7]
 1cc:	de 4f       	sbci	r29, 0xFE	; 254

    sbis    USBIN, USBMINUS ;1 [8] we want two bits K [sample 1 cycle too early]
 1ce:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    haveTwoBitsK    ;2 [10]
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <haveTwoBitsK>
    pop     YH              ;2 [11] undo the push from before
 1d2:	df 91       	pop	r29
    rjmp    waitForK        ;2 [13] this was not the end of sync, retry
 1d4:	eb cf       	rjmp	.-42     	; 0x1ac <waitForK>

000001d6 <haveTwoBitsK>:
haveTwoBitsK:
;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
    push    shift           ;2 [16]
 1d6:	2f 93       	push	r18
    push    x1              ;2 [12]
 1d8:	0f 93       	push	r16
    push    x2              ;2 [14]
 1da:	1f 93       	push	r17

    in      x1, USBIN       ;1 [17] <-- sample bit 0
 1dc:	09 b1       	in	r16, 0x09	; 9
    ldi     shift, 0xff     ;1 [18]
 1de:	2f ef       	ldi	r18, 0xFF	; 255
    bst     x1, USBMINUS    ;1 [19]
 1e0:	04 fb       	bst	r16, 4
    bld     shift, 0        ;1 [20]
 1e2:	20 f9       	bld	r18, 0
    push    x3              ;2 [22]
 1e4:	4f 93       	push	r20
    push    cnt             ;2 [24]
 1e6:	3f 93       	push	r19
    
    in      x2, USBIN       ;1 [25] <-- sample bit 1
 1e8:	19 b1       	in	r17, 0x09	; 9
    ser     x3              ;1 [26] [inserted init instruction]
 1ea:	4f ef       	ldi	r20, 0xFF	; 255
    eor     x1, x2          ;1 [27]
 1ec:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;1 [28]
 1ee:	04 fb       	bst	r16, 4
    bld     shift, 1        ;1 [29]
 1f0:	21 f9       	bld	r18, 1
    ldi     cnt, USB_BUFSIZE;1 [30] [inserted init instruction]
 1f2:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit2          ;2 [32]
 1f4:	31 c0       	rjmp	.+98     	; 0x258 <rxbit2>

000001f6 <unstuff0>:
;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------

unstuff0:               ;1 (branch taken)
    andi    x3, ~0x01   ;1 [15]
 1f6:	4e 7f       	andi	r20, 0xFE	; 254
    mov     x1, x2      ;1 [16] x2 contains last sampled (stuffed) bit
 1f8:	01 2f       	mov	r16, r17
    in      x2, USBIN   ;1 [17] <-- sample bit 1 again
 1fa:	19 b1       	in	r17, 0x09	; 9
    ori     shift, 0x01 ;1 [18]
 1fc:	21 60       	ori	r18, 0x01	; 1
    rjmp    didUnstuff0 ;2 [20]
 1fe:	28 c0       	rjmp	.+80     	; 0x250 <didUnstuff0>

00000200 <unstuff1>:

unstuff1:               ;1 (branch taken)
    mov     x2, x1      ;1 [21] x1 contains last sampled (stuffed) bit
 200:	10 2f       	mov	r17, r16
    andi    x3, ~0x02   ;1 [22]
 202:	4d 7f       	andi	r20, 0xFD	; 253
    ori     shift, 0x02 ;1 [23]
 204:	22 60       	ori	r18, 0x02	; 2
    nop                 ;1 [24]
 206:	00 00       	nop
    in      x1, USBIN   ;1 [25] <-- sample bit 2 again
 208:	09 b1       	in	r16, 0x09	; 9
    rjmp    didUnstuff1 ;2 [27]
 20a:	29 c0       	rjmp	.+82     	; 0x25e <didUnstuff1>

0000020c <unstuff2>:

unstuff2:               ;1 (branch taken)
    andi    x3, ~0x04   ;1 [29]
 20c:	4b 7f       	andi	r20, 0xFB	; 251
    ori     shift, 0x04 ;1 [30]
 20e:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2      ;1 [31] x2 contains last sampled (stuffed) bit
 210:	01 2f       	mov	r16, r17
    nop                 ;1 [32]
 212:	00 00       	nop
    in      x2, USBIN   ;1 [33] <-- sample bit 3
 214:	19 b1       	in	r17, 0x09	; 9
    rjmp    didUnstuff2 ;2 [35]
 216:	2b c0       	rjmp	.+86     	; 0x26e <didUnstuff2>

00000218 <unstuff3>:

unstuff3:               ;1 (branch taken)
    in      x2, USBIN   ;1 [34] <-- sample stuffed bit 3 [one cycle too late]
 218:	19 b1       	in	r17, 0x09	; 9
    andi    x3, ~0x08   ;1 [35]
 21a:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08 ;1 [36]
 21c:	28 60       	ori	r18, 0x08	; 8
    rjmp    didUnstuff3 ;2 [38]
 21e:	2a c0       	rjmp	.+84     	; 0x274 <didUnstuff3>

00000220 <unstuff4>:

unstuff4:               ;1 (branch taken)
    andi    x3, ~0x10   ;1 [40]
 220:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN   ;1 [41] <-- sample stuffed bit 4
 222:	09 b1       	in	r16, 0x09	; 9
    ori     shift, 0x10 ;1 [42]
 224:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4 ;2 [44]
 226:	2c c0       	rjmp	.+88     	; 0x280 <didUnstuff4>

00000228 <unstuff5>:

unstuff5:               ;1 (branch taken)
    andi    x3, ~0x20   ;1 [48]
 228:	4f 7d       	andi	r20, 0xDF	; 223
    in      x2, USBIN   ;1 [49] <-- sample stuffed bit 5
 22a:	19 b1       	in	r17, 0x09	; 9
    ori     shift, 0x20 ;1 [50]
 22c:	20 62       	ori	r18, 0x20	; 32
    rjmp    didUnstuff5 ;2 [52]
 22e:	2f c0       	rjmp	.+94     	; 0x28e <didUnstuff5>

00000230 <unstuff6>:

unstuff6:               ;1 (branch taken)
    andi    x3, ~0x40   ;1 [56]
 230:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN   ;1 [57] <-- sample stuffed bit 6
 232:	09 b1       	in	r16, 0x09	; 9
    ori     shift, 0x40 ;1 [58]
 234:	20 64       	ori	r18, 0x40	; 64
    rjmp    didUnstuff6 ;2 [60]
 236:	32 c0       	rjmp	.+100    	; 0x29c <didUnstuff6>

00000238 <rxLoop>:
; bit 4:    none
; bit 5:    none
; bit 6:    none
; bit 7:    jump, eor
rxLoop:
    eor     x3, shift   ;1 [0] reconstruct: x3 is 0 at bit locations we changed, 1 at others
 238:	42 27       	eor	r20, r18
    in      x1, USBIN   ;1 [1] <-- sample bit 0
 23a:	09 b1       	in	r16, 0x09	; 9
    st      y+, x3      ;2 [3] store data
 23c:	49 93       	st	Y+, r20
    ser     x3          ;1 [4]
 23e:	4f ef       	ldi	r20, 0xFF	; 255
    nop                 ;1 [5]
 240:	00 00       	nop
    eor     x2, x1      ;1 [6]
 242:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [7]
 244:	14 fb       	bst	r17, 4
    bld     shift, 0    ;1 [8]
 246:	20 f9       	bld	r18, 0
    in      x2, USBIN   ;1 [9] <-- sample bit 1 (or possibly bit 0 stuffed)
 248:	19 b1       	in	r17, 0x09	; 9
    andi    x2, USBMASK ;1 [10]
 24a:	14 71       	andi	r17, 0x14	; 20
    breq    se0         ;1 [11] SE0 check for bit 1
 24c:	c9 f1       	breq	.+114    	; 0x2c0 <se0>
    andi    shift, 0xf9 ;1 [12]
 24e:	29 7f       	andi	r18, 0xF9	; 249

00000250 <didUnstuff0>:
didUnstuff0:
    breq    unstuff0    ;1 [13]
 250:	91 f2       	breq	.-92     	; 0x1f6 <unstuff0>
    eor     x1, x2      ;1 [14]
 252:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [15]
 254:	04 fb       	bst	r16, 4
    bld     shift, 1    ;1 [16]
 256:	21 f9       	bld	r18, 1

00000258 <rxbit2>:
rxbit2:
    in      x1, USBIN   ;1 [17] <-- sample bit 2 (or possibly bit 1 stuffed)
 258:	09 b1       	in	r16, 0x09	; 9
    andi    shift, 0xf3 ;1 [18]
 25a:	23 7f       	andi	r18, 0xF3	; 243
    breq    unstuff1    ;1 [19] do remaining work for bit 1
 25c:	89 f2       	breq	.-94     	; 0x200 <unstuff1>

0000025e <didUnstuff1>:
didUnstuff1:
    subi    cnt, 1      ;1 [20]
 25e:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow    ;1 [21] loop control
 260:	58 f1       	brcs	.+86     	; 0x2b8 <overflow>
    eor     x2, x1      ;1 [22]
 262:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [23]
 264:	14 fb       	bst	r17, 4
    bld     shift, 2    ;1 [24]
 266:	22 f9       	bld	r18, 2
    in      x2, USBIN   ;1 [25] <-- sample bit 3 (or possibly bit 2 stuffed)
 268:	19 b1       	in	r17, 0x09	; 9
    andi    shift, 0xe7 ;1 [26]
 26a:	27 7e       	andi	r18, 0xE7	; 231
    breq    unstuff2    ;1 [27]
 26c:	79 f2       	breq	.-98     	; 0x20c <unstuff2>

0000026e <didUnstuff2>:
didUnstuff2:
    eor     x1, x2      ;1 [28]
 26e:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [29]
 270:	04 fb       	bst	r16, 4
    bld     shift, 3    ;1 [30]
 272:	23 f9       	bld	r18, 3

00000274 <didUnstuff3>:
didUnstuff3:
    andi    shift, 0xcf ;1 [31]
 274:	2f 7c       	andi	r18, 0xCF	; 207
    breq    unstuff3    ;1 [32]
 276:	81 f2       	breq	.-96     	; 0x218 <unstuff3>
    in      x1, USBIN   ;1 [33] <-- sample bit 4
 278:	09 b1       	in	r16, 0x09	; 9
    eor     x2, x1      ;1 [34]
 27a:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [35]
 27c:	14 fb       	bst	r17, 4
    bld     shift, 4    ;1 [36]
 27e:	24 f9       	bld	r18, 4

00000280 <didUnstuff4>:
didUnstuff4:
    andi    shift, 0x9f ;1 [37]
 280:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4    ;1 [38]
 282:	71 f2       	breq	.-100    	; 0x220 <unstuff4>
    nop2                ;2 [40]
 284:	00 c0       	rjmp	.+0      	; 0x286 <didUnstuff4+0x6>
    in      x2, USBIN   ;1 [41] <-- sample bit 5
 286:	19 b1       	in	r17, 0x09	; 9
    eor     x1, x2      ;1 [42]
 288:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [43]
 28a:	04 fb       	bst	r16, 4
    bld     shift, 5    ;1 [44]
 28c:	25 f9       	bld	r18, 5

0000028e <didUnstuff5>:
didUnstuff5:
    andi    shift, 0x3f ;1 [45]
 28e:	2f 73       	andi	r18, 0x3F	; 63
    breq    unstuff5    ;1 [46]
 290:	59 f2       	breq	.-106    	; 0x228 <unstuff5>
    nop2                ;2 [48]
 292:	00 c0       	rjmp	.+0      	; 0x294 <didUnstuff5+0x6>
    in      x1, USBIN   ;1 [49] <-- sample bit 6
 294:	09 b1       	in	r16, 0x09	; 9
    eor     x2, x1      ;1 [50]
 296:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [51]
 298:	14 fb       	bst	r17, 4
    bld     shift, 6    ;1 [52]
 29a:	26 f9       	bld	r18, 6

0000029c <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0x02 ;1 [53]
 29c:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6    ;1 [54]
 29e:	40 f2       	brcs	.-112    	; 0x230 <unstuff6>
    nop2                ;2 [56]
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <didUnstuff6+0x6>
    in      x2, USBIN   ;1 [57] <-- sample bit 7
 2a2:	19 b1       	in	r17, 0x09	; 9
    eor     x1, x2      ;1 [58]
 2a4:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [59]
 2a6:	04 fb       	bst	r16, 4
    bld     shift, 7    ;1 [60]
 2a8:	27 f9       	bld	r18, 7

000002aa <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0x04 ;1 [61]
 2aa:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop      ;2 [63] loop control
 2ac:	28 f6       	brcc	.-118    	; 0x238 <rxLoop>

000002ae <unstuff7>:
unstuff7:
    andi    x3, ~0x80   ;1 [63]
 2ae:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80 ;1 [64]
 2b0:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN   ;1 [65] <-- sample stuffed bit 7
 2b2:	19 b1       	in	r17, 0x09	; 9
    nop                 ;1 [66]
 2b4:	00 00       	nop
    rjmp    didUnstuff7 ;2 [68]
 2b6:	f9 cf       	rjmp	.-14     	; 0x2aa <didUnstuff7>

000002b8 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 2b8:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 2ba:	1c bb       	out	0x1c, r17	; 28

000002bc <ignorePacket>:
ignorePacket:
    clr     token
 2bc:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 2be:	19 c0       	rjmp	.+50     	; 0x2f2 <handleSetupOrOut>

000002c0 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 2c0:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 2c2:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 2c4:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 2c6:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 2c8:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 2ca:	1c bb       	out	0x1c, r17	; 28
    ld      token, y            ;[11]
 2cc:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 2ce:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 2d0:	f9 f0       	breq	.+62     	; 0x310 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 2d2:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 2d4:	e9 f0       	breq	.+58     	; 0x310 <handleData>
    lds     shift, usbDeviceAddr;[17]
 2d6:	20 91 20 01 	lds	r18, 0x0120
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 2da:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 2dc:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 2de:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 2e0:	ed cf       	rjmp	.-38     	; 0x2bc <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
 2e2:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
 2e4:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
 2e6:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 2e8:	41 f1       	breq	.+80     	; 0x33a <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 2ea:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 2ec:	11 f0       	breq	.+4      	; 0x2f2 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 2ee:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 2f0:	29 f7       	brne	.-54     	; 0x2bc <ignorePacket>

000002f2 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 2f2:	00 93 27 01 	sts	0x0127, r16

000002f6 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 2f6:	3f 91       	pop	r19
 2f8:	4f 91       	pop	r20
 2fa:	1f 91       	pop	r17
 2fc:	0f 91       	pop	r16
 2fe:	2f 91       	pop	r18
 300:	df 91       	pop	r29
    USB_LOAD_PENDING(YL)        ;[49]
 302:	cc b3       	in	r28, 0x1c	; 28
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 304:	c0 fd       	sbrc	r28, 0
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 306:	4f cf       	rjmp	.-354    	; 0x1a6 <waitForJ>

00000308 <sofError>:
sofError:
    POP_RETI                    ;macro call
 308:	cf 91       	pop	r28
 30a:	cf bf       	out	0x3f, r28	; 63
 30c:	cf 91       	pop	r28
    reti
 30e:	18 95       	reti

00000310 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 310:	20 91 27 01 	lds	r18, 0x0127
    tst     shift               ;[20]
 314:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 316:	79 f3       	breq	.-34     	; 0x2f6 <doReturn>
    lds     x2, usbRxLen        ;[22]
 318:	10 91 25 01 	lds	r17, 0x0125
    tst     x2                  ;[24]
 31c:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 31e:	69 f5       	brne	.+90     	; 0x37a <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 320:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 322:	6a f1       	brmi	.+90     	; 0x37e <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 324:	30 93 25 01 	sts	0x0125, r19
    sts     usbRxToken, shift   ;[30]
 328:	20 93 21 01 	sts	0x0121, r18
    lds     x2, usbInputBufOffset;[32] swap buffers
 32c:	10 91 22 01 	lds	r17, 0x0122
    ldi     cnt, USB_BUFSIZE    ;[34]
 330:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 332:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 334:	30 93 22 01 	sts	0x0122, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 338:	22 c0       	rjmp	.+68     	; 0x37e <sendAckAndReti>

0000033a <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 33a:	00 91 25 01 	lds	r16, 0x0125
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 33e:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 340:	e4 f4       	brge	.+56     	; 0x37a <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 342:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
 344:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
 346:	49 f4       	brne	.+18     	; 0x35a <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 348:	30 91 01 01 	lds	r19, 0x0101
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 34c:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 34e:	19 c0       	rjmp	.+50     	; 0x382 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 350:	00 93 01 01 	sts	0x0101, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
 354:	c9 e0       	ldi	r28, 0x09	; 9
    ldi     YH, hi8(usbTxBuf)   ;[44]
 356:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 358:	18 c0       	rjmp	.+48     	; 0x38a <usbSendAndReti>

0000035a <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
 35a:	30 91 14 01 	lds	r19, 0x0114
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
 35e:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
 360:	10 c0       	rjmp	.+32     	; 0x382 <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
 362:	00 93 14 01 	sts	0x0114, r16
    ldi     YL, lo8(usbTxBuf1)  ;[46]
 366:	c5 e1       	ldi	r28, 0x15	; 21
    ldi     YH, hi8(usbTxBuf1)  ;[47]
 368:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
 36a:	0f c0       	rjmp	.+30     	; 0x38a <usbSendAndReti>

0000036c <stuffN1Delay>:
;----------------------------------------------------------------------------

txByteLoop:
txBitloop:
stuffN1Delay:                   ;     [03]
    ror     shift               ;[-5] [11] [59]
 36c:	27 95       	ror	r18
    brcc    doExorN1            ;[-4]      [60]
 36e:	a8 f4       	brcc	.+42     	; 0x39a <doExorN1>
    subi    x4, 1               ;[-3]
 370:	51 50       	subi	r21, 0x01	; 1
    brne    commonN1            ;[-2]
 372:	a9 f4       	brne	.+42     	; 0x39e <commonN1>
    lsl     shift               ;[-1] compensate ror after rjmp stuffDelay
 374:	22 0f       	add	r18, r18
    nop                         ;[00] stuffing consists of just waiting 8 cycles
 376:	00 00       	nop
    rjmp    stuffN1Delay        ;[01] after ror, C bit is reliably clear
 378:	f9 cf       	rjmp	.-14     	; 0x36c <stuffN1Delay>

0000037a <sendNakAndReti>:

sendNakAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_NAK      ;1 [-18]
 37a:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    usbSendX3           ;2 [-16]
 37c:	03 c0       	rjmp	.+6      	; 0x384 <usbSendX3>

0000037e <sendAckAndReti>:
sendAckAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_ACK      ;1 [-18]
 37e:	42 ed       	ldi	r20, 0xD2	; 210
    rjmp    usbSendX3           ;2 [-16]
 380:	01 c0       	rjmp	.+2      	; 0x384 <usbSendX3>

00000382 <sendCntAndReti>:
sendCntAndReti:                 ;0 [-17] 17 cycles until SOP
    mov     x3, cnt             ;1 [-16]
 382:	43 2f       	mov	r20, r19

00000384 <usbSendX3>:
usbSendX3:                      ;0 [-16]
    ldi     YL, 20              ;1 [-15] 'x3' is R20
 384:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0               ;1 [-14]
 386:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2              ;1 [-13]
 388:	32 e0       	ldi	r19, 0x02	; 2

0000038a <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte
;uses: x1...x2, x4, shift, cnt, Y [x1 = mirror USBOUT, x2 = USBMASK, x4 = bitstuff cnt]
;Numbers in brackets are time since first bit of sync pattern is sent (start of instruction)
usbSendAndReti:
    in      x2, USBDDR          ;[-12] 12 cycles until SOP
 38a:	1a b1       	in	r17, 0x0a	; 10
    ori     x2, USBMASK         ;[-11]
 38c:	14 61       	ori	r17, 0x14	; 20
    sbi     USBOUT, USBMINUS    ;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 38e:	5c 9a       	sbi	0x0b, 4	; 11
    out     USBDDR, x2          ;[-8] <--- acquire bus
 390:	1a b9       	out	0x0a, r17	; 10
    in      x1, USBOUT          ;[-7] port mirror for tx loop
 392:	0b b1       	in	r16, 0x0b	; 11
    ldi     shift, 0x40         ;[-6] sync byte is first byte sent (we enter loop after ror)
 394:	20 e4       	ldi	r18, 0x40	; 64
    ldi     x2, USBMASK         ;[-5]
 396:	14 e1       	ldi	r17, 0x14	; 20
    push    x4                  ;[-4]
 398:	5f 93       	push	r21

0000039a <doExorN1>:
doExorN1:
    eor     x1, x2              ;[-2] [06] [62]
 39a:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[-1] [07] [63]
 39c:	56 e0       	ldi	r21, 0x06	; 6

0000039e <commonN1>:
commonN1:
stuffN2Delay:
    out     USBOUT, x1          ;[00] [08] [64] <--- set bit
 39e:	0b b9       	out	0x0b, r16	; 11
    ror     shift               ;[01]
 3a0:	27 95       	ror	r18
    brcc    doExorN2            ;[02]
 3a2:	20 f4       	brcc	.+8      	; 0x3ac <doExorN2>
    subi    x4, 1               ;[03]
 3a4:	51 50       	subi	r21, 0x01	; 1
    brne    commonN2            ;[04]
 3a6:	21 f4       	brne	.+8      	; 0x3b0 <commonN2>
    lsl     shift               ;[05] compensate ror after rjmp stuffDelay
 3a8:	22 0f       	add	r18, r18
    rjmp    stuffN2Delay        ;[06] after ror, C bit is reliably clear
 3aa:	f9 cf       	rjmp	.-14     	; 0x39e <commonN1>

000003ac <doExorN2>:
doExorN2:
    eor     x1, x2              ;[04] [12]
 3ac:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[05] [13]
 3ae:	56 e0       	ldi	r21, 0x06	; 6

000003b0 <commonN2>:
commonN2:
    nop                         ;[06] [14]
 3b0:	00 00       	nop
    subi    cnt, 171            ;[07] [15] trick: (3 * 171) & 0xff = 1
 3b2:	3b 5a       	subi	r19, 0xAB	; 171
    out     USBOUT, x1          ;[08] [16] <--- set bit
 3b4:	0b b9       	out	0x0b, r16	; 11
    brcs    txBitloop           ;[09]      [25] [41]
 3b6:	d0 f2       	brcs	.-76     	; 0x36c <stuffN1Delay>

000003b8 <stuff6Delay>:

stuff6Delay:
    ror     shift               ;[42] [50]
 3b8:	27 95       	ror	r18
    brcc    doExor6             ;[43]
 3ba:	28 f4       	brcc	.+10     	; 0x3c6 <doExor6>
    subi    x4, 1               ;[44]
 3bc:	51 50       	subi	r21, 0x01	; 1
    brne    common6             ;[45]
 3be:	29 f4       	brne	.+10     	; 0x3ca <common6>
    lsl     shift               ;[46] compensate ror after rjmp stuffDelay
 3c0:	22 0f       	add	r18, r18
    nop                         ;[47] stuffing consists of just waiting 8 cycles
 3c2:	00 00       	nop
    rjmp    stuff6Delay         ;[48] after ror, C bit is reliably clear
 3c4:	f9 cf       	rjmp	.-14     	; 0x3b8 <stuff6Delay>

000003c6 <doExor6>:
doExor6:
    eor     x1, x2              ;[45] [53]
 3c6:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[46]
 3c8:	56 e0       	ldi	r21, 0x06	; 6

000003ca <common6>:
common6:
stuff7Delay:
    ror     shift               ;[47] [55]
 3ca:	27 95       	ror	r18
    out     USBOUT, x1          ;[48] <--- set bit
 3cc:	0b b9       	out	0x0b, r16	; 11
    brcc    doExor7             ;[49]
 3ce:	20 f4       	brcc	.+8      	; 0x3d8 <doExor7>
    subi    x4, 1               ;[50]
 3d0:	51 50       	subi	r21, 0x01	; 1
    brne    common7             ;[51]
 3d2:	21 f4       	brne	.+8      	; 0x3dc <common7>
    lsl     shift               ;[52] compensate ror after rjmp stuffDelay
 3d4:	22 0f       	add	r18, r18
    rjmp    stuff7Delay         ;[53] after ror, C bit is reliably clear
 3d6:	f9 cf       	rjmp	.-14     	; 0x3ca <common6>

000003d8 <doExor7>:
doExor7:
    eor     x1, x2              ;[51] [59]
 3d8:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[52]
 3da:	56 e0       	ldi	r21, 0x06	; 6

000003dc <common7>:
common7:
    ld      shift, y+           ;[53]
 3dc:	29 91       	ld	r18, Y+
    tst     cnt                 ;[55]
 3de:	33 23       	and	r19, r19
    out     USBOUT, x1          ;[56] <--- set bit
 3e0:	0b b9       	out	0x0b, r16	; 11
    brne    txByteLoop          ;[57]
 3e2:	21 f6       	brne	.-120    	; 0x36c <stuffN1Delay>

;make SE0:
    cbr     x1, USBMASK         ;[58] prepare SE0 [spec says EOP may be 15 to 18 cycles]
 3e4:	0b 7e       	andi	r16, 0xEB	; 235
    lds     x2, usbNewDeviceAddr;[59]
 3e6:	10 91 26 01 	lds	r17, 0x0126
    lsl     x2                  ;[61] we compare with left shifted address
 3ea:	11 0f       	add	r17, r17
    subi    YL, 2 + 20          ;[62] Only assign address on data packets, not ACK/NAK in x3
 3ec:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0               ;[63]
 3ee:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1          ;[00] <-- out SE0 -- from now 2 bits = 16 cycles until bus idle
 3f0:	0b b9       	out	0x0b, r16	; 11
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign      ;[01]
 3f2:	11 f0       	breq	.+4      	; 0x3f8 <skipAddrAssign>
    sts     usbDeviceAddr, x2   ; if not skipped: SE0 is one cycle longer
 3f4:	10 93 20 01 	sts	0x0120, r17

000003f8 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[03] int0 occurred during TX -- clear pending flag
 3f8:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ;[04]
 3fa:	1c bb       	out	0x1c, r17	; 28
    ori     x1, USBIDLE         ;[05]
 3fc:	00 61       	ori	r16, 0x10	; 16
    in      x2, USBDDR          ;[06]
 3fe:	1a b1       	in	r17, 0x0a	; 10
    cbr     x2, USBMASK         ;[07] set both pins to input
 400:	1b 7e       	andi	r17, 0xEB	; 235
    mov     x3, x1              ;[08]
 402:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK         ;[09] configure no pullup on both pins
 404:	4b 7e       	andi	r20, 0xEB	; 235
    pop     x4                  ;[10]
 406:	5f 91       	pop	r21
    nop2                        ;[12]
 408:	00 c0       	rjmp	.+0      	; 0x40a <skipAddrAssign+0x12>
    nop2                        ;[14]
 40a:	00 c0       	rjmp	.+0      	; 0x40c <skipAddrAssign+0x14>
    out     USBOUT, x1          ;[16] <-- out J (idle) -- end of SE0 (EOP signal)
 40c:	0b b9       	out	0x0b, r16	; 11
    out     USBDDR, x2          ;[17] <-- release bus now
 40e:	1a b9       	out	0x0a, r17	; 10
    out     USBOUT, x3          ;[18] <-- ensure no pull-up resistors are active
 410:	4b b9       	out	0x0b, r20	; 11
    rjmp    doReturn
 412:	71 cf       	rjmp	.-286    	; 0x2f6 <doReturn>

00000414 <usbFunctionSetup>:
}

/* ------------------------------------------------------------------------- */

usbMsgLen_t usbFunctionSetup(uchar data[8])
{
 414:	fc 01       	movw	r30, r24
usbRequest_t    *rq = (void *)data;

    /* The following requests are never used. But since they are required by
     * the specification, we implement them in this example.
     */
    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
 416:	80 81       	ld	r24, Z
 418:	80 76       	andi	r24, 0x60	; 96
 41a:	80 32       	cpi	r24, 0x20	; 32
 41c:	d1 f4       	brne	.+52     	; 0x452 <usbFunctionSetup+0x3e>
        DBG1(0x50, &rq->bRequest, 1);   /* debug output: print our request */
        if(rq->bRequest == USBRQ_HID_GET_REPORT){  /* wValue: ReportType (highbyte), ReportID (lowbyte) */
 41e:	81 81       	ldd	r24, Z+1	; 0x01
 420:	81 30       	cpi	r24, 0x01	; 1
 422:	41 f4       	brne	.+16     	; 0x434 <usbFunctionSetup+0x20>
            /* we only have one report type, so don't look at wValue */
            usbMsgPtr = (void *)&reportBuffer;
 424:	83 e0       	ldi	r24, 0x03	; 3
 426:	91 e0       	ldi	r25, 0x01	; 1
 428:	90 93 24 01 	sts	0x0124, r25
 42c:	80 93 23 01 	sts	0x0123, r24
            return sizeof(reportBuffer);
 430:	85 e0       	ldi	r24, 0x05	; 5
 432:	08 95       	ret
        }else if(rq->bRequest == USBRQ_HID_GET_IDLE){
 434:	82 30       	cpi	r24, 0x02	; 2
 436:	41 f4       	brne	.+16     	; 0x448 <usbFunctionSetup+0x34>
            usbMsgPtr = &idleRate;
 438:	82 e0       	ldi	r24, 0x02	; 2
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	90 93 24 01 	sts	0x0124, r25
 440:	80 93 23 01 	sts	0x0123, r24
            return 1;
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	08 95       	ret
        }else if(rq->bRequest == USBRQ_HID_SET_IDLE){
 448:	8a 30       	cpi	r24, 0x0A	; 10
 44a:	19 f4       	brne	.+6      	; 0x452 <usbFunctionSetup+0x3e>
            idleRate = rq->wValue.bytes[1];
 44c:	83 81       	ldd	r24, Z+3	; 0x03
 44e:	80 93 02 01 	sts	0x0102, r24
        }
    }else{
        /* no vendor specific requests implemented */
    }
    return 0;   /* default for not implemented requests: return no data back to host */
 452:	80 e0       	ldi	r24, 0x00	; 0
}
 454:	08 95       	ret

00000456 <main>:
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 456:	9e e0       	ldi	r25, 0x0E	; 14
 458:	88 e1       	ldi	r24, 0x18	; 24
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	f8 94       	cli
 45e:	a8 95       	wdr
 460:	80 93 60 00 	sts	0x0060, r24
 464:	0f be       	out	0x3f, r0	; 63
 466:	90 93 60 00 	sts	0x0060, r25
     * That's the way we need D+ and D-. Therefore we don't need any
     * additional hardware initialization.
     */
    odDebugInit();
    DBG1(0x00, 0, 0);       /* debug output: main starts */
    usbInit();
 46a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <usbInit>
    usbDeviceDisconnect();  /* enforce re-enumeration, do this while interrupts are disabled! */
 46e:	54 9a       	sbi	0x0a, 4	; 10
    i = 0;
 470:	80 e0       	ldi	r24, 0x00	; 0
    while(--i){             /* fake USB disconnect for > 250 ms */
 472:	81 50       	subi	r24, 0x01	; 1
 474:	41 f0       	breq	.+16     	; 0x486 <main+0x30>
        wdt_reset();
 476:	a8 95       	wdr
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 478:	e7 eb       	ldi	r30, 0xB7	; 183
 47a:	fb e0       	ldi	r31, 0x0B	; 11
 47c:	31 97       	sbiw	r30, 0x01	; 1
 47e:	f1 f7       	brne	.-4      	; 0x47c <main+0x26>
 480:	00 c0       	rjmp	.+0      	; 0x482 <main+0x2c>
 482:	00 00       	nop
 484:	f6 cf       	rjmp	.-20     	; 0x472 <main+0x1c>
        _delay_ms(1);
    }
    usbDeviceConnect();
 486:	54 98       	cbi	0x0a, 4	; 10
    sei();
 488:	78 94       	sei
    DBG1(0x01, 0, 0);       /* debug output: main loop starts */
	reportBuffer.buttonMask=0x00;
 48a:	10 92 03 01 	sts	0x0103, r1
	reportBuffer.dWheel=0x00;
 48e:	10 92 07 01 	sts	0x0107, r1
	reportBuffer.dx=0x00;
 492:	10 92 04 01 	sts	0x0104, r1
	reportBuffer.dy=0x00;
 496:	10 92 05 01 	sts	0x0105, r1
    while(1)
	{                /* main event loop */
        DBG1(0x02, 0, 0);   /* debug output: main loop iterates */
        wdt_reset();
 49a:	a8 95       	wdr
        usbPoll();
 49c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <usbPoll>
        if(usbInterruptIsReady()){
 4a0:	80 91 14 01 	lds	r24, 0x0114
 4a4:	84 ff       	sbrs	r24, 4
 4a6:	f9 cf       	rjmp	.-14     	; 0x49a <main+0x44>
            /* called after every poll of the interrupt endpoint */
            //advanceCircleByFixedAngle();
            DBG1(0x03, 0, 0);   /* debug output: interrupt report prepared */
            usbSetInterrupt((void *)&reportBuffer, sizeof(reportBuffer));
 4a8:	65 e0       	ldi	r22, 0x05	; 5
 4aa:	83 e0       	ldi	r24, 0x03	; 3
 4ac:	91 e0       	ldi	r25, 0x01	; 1
 4ae:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <usbSetInterrupt>
 4b2:	f3 cf       	rjmp	.-26     	; 0x49a <main+0x44>

000004b4 <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 4b4:	cf 93       	push	r28
 4b6:	c6 2f       	mov	r28, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 4b8:	20 91 14 01 	lds	r18, 0x0114
 4bc:	24 ff       	sbrs	r18, 4
 4be:	07 c0       	rjmp	.+14     	; 0x4ce <usbSetInterrupt+0x1a>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 4c0:	30 91 15 01 	lds	r19, 0x0115
 4c4:	28 e8       	ldi	r18, 0x88	; 136
 4c6:	23 27       	eor	r18, r19
 4c8:	20 93 15 01 	sts	0x0115, r18
 4cc:	03 c0       	rjmp	.+6      	; 0x4d4 <usbSetInterrupt+0x20>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 4ce:	2a e5       	ldi	r18, 0x5A	; 90
 4d0:	20 93 14 01 	sts	0x0114, r18
 4d4:	dc 01       	movw	r26, r24
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 4d6:	e6 e1       	ldi	r30, 0x16	; 22
 4d8:	f1 e0       	ldi	r31, 0x01	; 1
 4da:	8c 2f       	mov	r24, r28
 4dc:	8e 0f       	add	r24, r30
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 4de:	9d 91       	ld	r25, X+
 4e0:	91 93       	st	Z+, r25
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 4e2:	8e 13       	cpse	r24, r30
 4e4:	fc cf       	rjmp	.-8      	; 0x4de <usbSetInterrupt+0x2a>
    usbCrc16Append(&txStatus->buffer[1], len);
 4e6:	6c 2f       	mov	r22, r28
 4e8:	86 e1       	ldi	r24, 0x16	; 22
 4ea:	91 e0       	ldi	r25, 0x01	; 1
 4ec:	0e 94 cc 00 	call	0x198	; 0x198 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 4f0:	cc 5f       	subi	r28, 0xFC	; 252
 4f2:	c0 93 14 01 	sts	0x0114, r28
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
 4f6:	cf 91       	pop	r28
 4f8:	08 95       	ret

000004fa <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
	schar   len;
	uchar   i;

    len = usbRxLen - 3;
 4fe:	80 91 25 01 	lds	r24, 0x0125
 502:	83 50       	subi	r24, 0x03	; 3
    if(len >= 0)
 504:	87 fd       	sbrc	r24, 7
 506:	a9 c0       	rjmp	.+338    	; 0x65a <usbPoll+0x160>
	* need data integrity checks with this driver, check the CRC in your app
	* code and report errors back to the host. Since the ACK was already sent,
	* retries must be handled on application level.
	* unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
	*/
		usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 508:	90 91 22 01 	lds	r25, 0x0122
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 50c:	20 91 21 01 	lds	r18, 0x0121
 510:	2d 32       	cpi	r18, 0x2D	; 45
 512:	09 f0       	breq	.+2      	; 0x516 <usbPoll+0x1c>
 514:	a0 c0       	rjmp	.+320    	; 0x656 <usbPoll+0x15c>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 516:	88 30       	cpi	r24, 0x08	; 8
 518:	09 f0       	breq	.+2      	; 0x51c <usbPoll+0x22>
 51a:	9d c0       	rjmp	.+314    	; 0x656 <usbPoll+0x15c>
	* need data integrity checks with this driver, check the CRC in your app
	* code and report errors back to the host. Since the ACK was already sent,
	* retries must be handled on application level.
	* unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
	*/
		usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 51c:	cc e0       	ldi	r28, 0x0C	; 12
 51e:	d0 e0       	ldi	r29, 0x00	; 0
 520:	c9 1b       	sub	r28, r25
 522:	d1 09       	sbc	r29, r1
 524:	c7 5d       	subi	r28, 0xD7	; 215
 526:	de 4f       	sbci	r29, 0xFE	; 254
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 528:	83 ec       	ldi	r24, 0xC3	; 195
 52a:	80 93 09 01 	sts	0x0109, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 52e:	8a e5       	ldi	r24, 0x5A	; 90
 530:	80 93 01 01 	sts	0x0101, r24
        usbMsgFlags = 0;
 534:	10 92 08 01 	sts	0x0108, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
 538:	88 81       	ld	r24, Y
 53a:	80 76       	andi	r24, 0x60	; 96
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 53c:	21 f0       	breq	.+8      	; 0x546 <usbPoll+0x4c>
            replyLen = usbFunctionSetup(data);
 53e:	ce 01       	movw	r24, r28
 540:	0e 94 0a 02 	call	0x414	; 0x414 <usbFunctionSetup>
 544:	7f c0       	rjmp	.+254    	; 0x644 <usbPoll+0x14a>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 546:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 548:	10 92 12 01 	sts	0x0112, r1
    SWITCH_START(rq->bRequest)
 54c:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 54e:	81 11       	cpse	r24, r1
 550:	06 c0       	rjmp	.+12     	; 0x55e <usbPoll+0x64>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 552:	10 92 13 01 	sts	0x0113, r1
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 556:	22 e1       	ldi	r18, 0x12	; 18
 558:	31 e0       	ldi	r19, 0x01	; 1
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
 55a:	82 e0       	ldi	r24, 0x02	; 2
 55c:	6f c0       	rjmp	.+222    	; 0x63c <usbPoll+0x142>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 55e:	85 30       	cpi	r24, 0x05	; 5
 560:	19 f4       	brne	.+6      	; 0x568 <usbPoll+0x6e>
        usbNewDeviceAddr = value;
 562:	90 93 26 01 	sts	0x0126, r25
 566:	67 c0       	rjmp	.+206    	; 0x636 <usbPoll+0x13c>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 568:	86 30       	cpi	r24, 0x06	; 6
 56a:	09 f0       	breq	.+2      	; 0x56e <usbPoll+0x74>
 56c:	4e c0       	rjmp	.+156    	; 0x60a <usbPoll+0x110>
 56e:	8b 81       	ldd	r24, Y+3	; 0x03
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 570:	81 30       	cpi	r24, 0x01	; 1
 572:	19 f4       	brne	.+6      	; 0x57a <usbPoll+0x80>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 574:	8e ec       	ldi	r24, 0xCE	; 206
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	29 c0       	rjmp	.+82     	; 0x5cc <usbPoll+0xd2>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 57a:	82 30       	cpi	r24, 0x02	; 2
 57c:	19 f4       	brne	.+6      	; 0x584 <usbPoll+0x8a>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 57e:	8c ea       	ldi	r24, 0xAC	; 172
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	1a c0       	rjmp	.+52     	; 0x5b8 <usbPoll+0xbe>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 584:	83 30       	cpi	r24, 0x03	; 3
 586:	41 f5       	brne	.+80     	; 0x5d8 <usbPoll+0xde>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
 588:	91 11       	cpse	r25, r1
 58a:	08 c0       	rjmp	.+16     	; 0x59c <usbPoll+0xa2>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 58c:	8c e2       	ldi	r24, 0x2C	; 44
 58e:	91 e0       	ldi	r25, 0x01	; 1
 590:	90 93 24 01 	sts	0x0124, r25
 594:	80 93 23 01 	sts	0x0123, r24
 598:	84 e0       	ldi	r24, 0x04	; 4
 59a:	33 c0       	rjmp	.+102    	; 0x602 <usbPoll+0x108>
        SWITCH_CASE(1)
 59c:	91 30       	cpi	r25, 0x01	; 1
 59e:	41 f4       	brne	.+16     	; 0x5b0 <usbPoll+0xb6>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 5a0:	84 e1       	ldi	r24, 0x14	; 20
 5a2:	91 e0       	ldi	r25, 0x01	; 1
 5a4:	90 93 24 01 	sts	0x0124, r25
 5a8:	80 93 23 01 	sts	0x0123, r24
 5ac:	88 e1       	ldi	r24, 0x18	; 24
 5ae:	29 c0       	rjmp	.+82     	; 0x602 <usbPoll+0x108>
        SWITCH_CASE(2)
 5b0:	92 30       	cpi	r25, 0x02	; 2
 5b2:	41 f4       	brne	.+16     	; 0x5c4 <usbPoll+0xca>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 5b4:	82 ef       	ldi	r24, 0xF2	; 242
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	90 93 24 01 	sts	0x0124, r25
 5bc:	80 93 23 01 	sts	0x0123, r24
 5c0:	82 e2       	ldi	r24, 0x22	; 34
 5c2:	1f c0       	rjmp	.+62     	; 0x602 <usbPoll+0x108>
        SWITCH_CASE(3)
 5c4:	93 30       	cpi	r25, 0x03	; 3
 5c6:	e1 f4       	brne	.+56     	; 0x600 <usbPoll+0x106>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_SERIAL_NUMBER, usbDescriptorStringSerialNumber)
 5c8:	80 ee       	ldi	r24, 0xE0	; 224
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	90 93 24 01 	sts	0x0124, r25
 5d0:	80 93 23 01 	sts	0x0123, r24
 5d4:	82 e1       	ldi	r24, 0x12	; 18
 5d6:	15 c0       	rjmp	.+42     	; 0x602 <usbPoll+0x108>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
 5d8:	81 32       	cpi	r24, 0x21	; 33
 5da:	41 f4       	brne	.+16     	; 0x5ec <usbPoll+0xf2>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 5dc:	8e eb       	ldi	r24, 0xBE	; 190
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	90 93 24 01 	sts	0x0124, r25
 5e4:	80 93 23 01 	sts	0x0123, r24
 5e8:	89 e0       	ldi	r24, 0x09	; 9
 5ea:	0b c0       	rjmp	.+22     	; 0x602 <usbPoll+0x108>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
 5ec:	82 32       	cpi	r24, 0x22	; 34
 5ee:	41 f4       	brne	.+16     	; 0x600 <usbPoll+0x106>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
 5f0:	8c e7       	ldi	r24, 0x7C	; 124
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	90 93 24 01 	sts	0x0124, r25
 5f8:	80 93 23 01 	sts	0x0123, r24
 5fc:	80 e3       	ldi	r24, 0x30	; 48
 5fe:	01 c0       	rjmp	.+2      	; 0x602 <usbPoll+0x108>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 600:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 602:	90 e4       	ldi	r25, 0x40	; 64
 604:	90 93 08 01 	sts	0x0108, r25
 608:	1d c0       	rjmp	.+58     	; 0x644 <usbPoll+0x14a>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 60a:	88 30       	cpi	r24, 0x08	; 8
 60c:	69 f0       	breq	.+26     	; 0x628 <usbPoll+0x12e>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 60e:	89 30       	cpi	r24, 0x09	; 9
 610:	19 f4       	brne	.+6      	; 0x618 <usbPoll+0x11e>
        usbConfiguration = value;
 612:	90 93 28 01 	sts	0x0128, r25
 616:	0f c0       	rjmp	.+30     	; 0x636 <usbPoll+0x13c>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 618:	8a 30       	cpi	r24, 0x0A	; 10
 61a:	49 f0       	breq	.+18     	; 0x62e <usbPoll+0x134>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 61c:	8b 30       	cpi	r24, 0x0B	; 11
 61e:	59 f4       	brne	.+22     	; 0x636 <usbPoll+0x13c>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 620:	8b e4       	ldi	r24, 0x4B	; 75
 622:	80 93 15 01 	sts	0x0115, r24
 626:	07 c0       	rjmp	.+14     	; 0x636 <usbPoll+0x13c>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
 628:	28 e2       	ldi	r18, 0x28	; 40
 62a:	31 e0       	ldi	r19, 0x01	; 1
 62c:	02 c0       	rjmp	.+4      	; 0x632 <usbPoll+0x138>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 62e:	22 e1       	ldi	r18, 0x12	; 18
 630:	31 e0       	ldi	r19, 0x01	; 1
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	03 c0       	rjmp	.+6      	; 0x63c <usbPoll+0x142>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 636:	22 e1       	ldi	r18, 0x12	; 18
 638:	31 e0       	ldi	r19, 0x01	; 1
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 63a:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
 63c:	30 93 24 01 	sts	0x0124, r19
 640:	20 93 23 01 	sts	0x0123, r18
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 644:	9f 81       	ldd	r25, Y+7	; 0x07
 646:	91 11       	cpse	r25, r1
 648:	04 c0       	rjmp	.+8      	; 0x652 <usbPoll+0x158>
 64a:	9e 81       	ldd	r25, Y+6	; 0x06
 64c:	98 17       	cp	r25, r24
 64e:	08 f4       	brcc	.+2      	; 0x652 <usbPoll+0x158>
 650:	89 2f       	mov	r24, r25
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 652:	80 93 00 01 	sts	0x0100, r24
		usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
		#if USB_CFG_HAVE_FLOWCONTROL
			if(usbRxLen > 0)    /* only mark as available if not inactivated */
				usbRxLen = 0;
		#else
			usbRxLen = 0;       /* mark rx buffer as available */
 656:	10 92 25 01 	sts	0x0125, r1
		#endif
    }
    if(usbTxLen & 0x10)    /* transmit system idle */
 65a:	80 91 01 01 	lds	r24, 0x0101
 65e:	84 ff       	sbrs	r24, 4
 660:	41 c0       	rjmp	.+130    	; 0x6e4 <usbPoll+0x1ea>
	{
        if(usbMsgLen != USB_NO_MSG)	    /* transmit data pending? */
 662:	80 91 00 01 	lds	r24, 0x0100
 666:	8f 3f       	cpi	r24, 0xFF	; 255
 668:	09 f4       	brne	.+2      	; 0x66c <usbPoll+0x172>
 66a:	3c c0       	rjmp	.+120    	; 0x6e4 <usbPoll+0x1ea>
 66c:	c8 2f       	mov	r28, r24
 66e:	89 30       	cpi	r24, 0x09	; 9
 670:	08 f0       	brcs	.+2      	; 0x674 <usbPoll+0x17a>
 672:	c8 e0       	ldi	r28, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 674:	8c 1b       	sub	r24, r28
 676:	80 93 00 01 	sts	0x0100, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 67a:	90 91 09 01 	lds	r25, 0x0109
 67e:	88 e8       	ldi	r24, 0x88	; 136
 680:	89 27       	eor	r24, r25
 682:	80 93 09 01 	sts	0x0109, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 686:	cc 23       	and	r28, r28
 688:	01 f1       	breq	.+64     	; 0x6ca <usbPoll+0x1d0>
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
 68a:	80 91 23 01 	lds	r24, 0x0123
 68e:	90 91 24 01 	lds	r25, 0x0124
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 692:	30 91 08 01 	lds	r19, 0x0108
 696:	2c 2f       	mov	r18, r28
 698:	28 0f       	add	r18, r24
 69a:	aa e0       	ldi	r26, 0x0A	; 10
 69c:	b1 e0       	ldi	r27, 0x01	; 1
 69e:	fc 01       	movw	r30, r24
 6a0:	36 ff       	sbrs	r19, 6
 6a2:	06 c0       	rjmp	.+12     	; 0x6b0 <usbPoll+0x1b6>
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 6a4:	34 91       	lpm	r19, Z
                    *data++ = c;
 6a6:	3d 93       	st	X+, r19
                    r++;
 6a8:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
 6aa:	2e 13       	cpse	r18, r30
 6ac:	fb cf       	rjmp	.-10     	; 0x6a4 <usbPoll+0x1aa>
 6ae:	04 c0       	rjmp	.+8      	; 0x6b8 <usbPoll+0x1be>
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
 6b0:	31 91       	ld	r19, Z+
 6b2:	3d 93       	st	X+, r19
                    r++;
                }while(--i);
 6b4:	2e 13       	cpse	r18, r30
 6b6:	fc cf       	rjmp	.-8      	; 0x6b0 <usbPoll+0x1b6>
 6b8:	01 96       	adiw	r24, 0x01	; 1
 6ba:	2f ef       	ldi	r18, 0xFF	; 255
 6bc:	2c 0f       	add	r18, r28
 6be:	82 0f       	add	r24, r18
 6c0:	91 1d       	adc	r25, r1
            }
            usbMsgPtr = r;
 6c2:	90 93 24 01 	sts	0x0124, r25
 6c6:	80 93 23 01 	sts	0x0123, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 6ca:	6c 2f       	mov	r22, r28
 6cc:	8a e0       	ldi	r24, 0x0A	; 10
 6ce:	91 e0       	ldi	r25, 0x01	; 1
 6d0:	0e 94 cc 00 	call	0x198	; 0x198 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 6d4:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 6d6:	cc 30       	cpi	r28, 0x0C	; 12
 6d8:	19 f0       	breq	.+6      	; 0x6e0 <usbPoll+0x1e6>
            usbMsgLen = USB_NO_MSG;
 6da:	8f ef       	ldi	r24, 0xFF	; 255
 6dc:	80 93 00 01 	sts	0x0100, r24
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 6e0:	c0 93 01 01 	sts	0x0101, r28
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 6e4:	84 e1       	ldi	r24, 0x14	; 20
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--)
	{
        uchar usbLineStatus = USBIN & USBMASK;
 6e6:	99 b1       	in	r25, 0x09	; 9
 6e8:	94 71       	andi	r25, 0x14	; 20
        if(usbLineStatus != 0)  /* SE0 has ended */
 6ea:	31 f4       	brne	.+12     	; 0x6f8 <usbPoll+0x1fe>
 6ec:	81 50       	subi	r24, 0x01	; 1
        if(usbMsgLen != USB_NO_MSG)	    /* transmit data pending? */
		{
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--)
 6ee:	d9 f7       	brne	.-10     	; 0x6e6 <usbPoll+0x1ec>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 6f0:	10 92 26 01 	sts	0x0126, r1
    usbDeviceAddr = 0;
 6f4:	10 92 20 01 	sts	0x0120, r1
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 6f8:	df 91       	pop	r29
 6fa:	cf 91       	pop	r28
 6fc:	08 95       	ret

000006fe <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 6fe:	e9 e6       	ldi	r30, 0x69	; 105
 700:	f0 e0       	ldi	r31, 0x00	; 0
 702:	80 81       	ld	r24, Z
 704:	82 60       	ori	r24, 0x02	; 2
 706:	80 83       	st	Z, r24
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 708:	e8 9a       	sbi	0x1d, 0	; 29
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 70a:	e4 e1       	ldi	r30, 0x14	; 20
 70c:	f1 e0       	ldi	r31, 0x01	; 1
 70e:	8b e4       	ldi	r24, 0x4B	; 75
 710:	81 83       	std	Z+1, r24	; 0x01
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 712:	8a e5       	ldi	r24, 0x5A	; 90
 714:	80 83       	st	Z, r24
 716:	08 95       	ret

00000718 <_exit>:
 718:	f8 94       	cli

0000071a <__stop_program>:
 71a:	ff cf       	rjmp	.-2      	; 0x71a <__stop_program>
