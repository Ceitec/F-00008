
USB-HID-Joystick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000007cc  00000860  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003d  00800102  00800102  00000862  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000862  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000894  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000008d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e87  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000628  00000000  00000000  0000180f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000058f  00000000  00000000  00001e37  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  000023c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005aa  00000000  00000000  000024a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a5b  00000000  00000000  00002a52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000034ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__ctors_end>
   4:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__vector_1>
   8:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
   c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  10:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  14:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  18:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  1c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  20:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  24:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  28:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  2c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  30:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  34:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  38:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  3c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  40:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  44:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  48:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  4c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  50:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  54:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  58:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  5c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  60:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  64:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  68:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  6c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  70:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  74:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
  78:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>

0000007c <__trampolines_end>:
  7c:	05 01       	movw	r0, r10
  7e:	09 04       	cpc	r0, r9
  80:	a1 01       	movw	r20, r2
  82:	05 09       	sbc	r16, r5
  84:	19 01       	movw	r2, r18
  86:	29 03       	fmul	r18, r17
  88:	15 00       	.word	0x0015	; ????
  8a:	25 01       	movw	r4, r10
  8c:	95 03       	fmuls	r17, r21
  8e:	75 01       	movw	r14, r10
  90:	81 02       	muls	r24, r17
  92:	95 01       	movw	r18, r10
  94:	75 05       	cpc	r23, r5
  96:	81 03       	fmuls	r16, r17
  98:	05 01       	movw	r0, r10
  9a:	09 01       	movw	r0, r18
  9c:	a1 00       	.word	0x00a1	; ????
  9e:	09 30       	cpi	r16, 0x09	; 9
  a0:	09 31       	cpi	r16, 0x19	; 25
  a2:	15 81       	ldd	r17, Z+5	; 0x05
  a4:	25 7f       	andi	r18, 0xF5	; 245
  a6:	75 08       	sbc	r7, r5
  a8:	95 02       	muls	r25, r21
  aa:	81 20       	and	r8, r1
  ac:	c0 09       	sbc	r28, r0
  ae:	38 95       	.word	0x9538	; ????
  b0:	01 81       	ldd	r16, Z+1	; 0x01
  b2:	02 09       	sbc	r16, r2
  b4:	3c 15       	cp	r19, r12
  b6:	00 25       	eor	r16, r0
  b8:	01 75       	andi	r16, 0x51	; 81
  ba:	01 95       	neg	r16
  bc:	01 b1       	in	r16, 0x01	; 1
  be:	22 95       	swap	r18
  c0:	07 b1       	in	r16, 0x07	; 7
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <usbDescriptorConfiguration+0x2>

000000c4 <usbDescriptorConfiguration>:
  c4:	09 02 22 00 01 01 00 80 7d 09 04 00 00 01 03 04     ..".....}.......
  d4:	01 00 09 21 01 01 05 01 22 48 00 07 05 81 03 08     ...!...."H......
  e4:	00 0a                                               ..

000000e6 <usbDescriptorDevice>:
  e6:	12 01 10 01 00 00 00 08 c0 16 dc 05 00 01 01 02     ................
  f6:	03 01                                               ..

000000f8 <usbDescriptorStringSerialNumber>:
  f8:	12 03 55 00 53 00 42 00 41 00 30 00 30 00 30 00     ..U.S.B.A.0.0.0.
 108:	30 00                                               0.

0000010a <usbDescriptorStringDevice>:
 10a:	22 03 55 00 53 00 42 00 20 00 48 00 49 00 44 00     ".U.S.B. .H.I.D.
 11a:	20 00 4a 00 6f 00 79 00 73 00 74 00 69 00 63 00      .J.o.y.s.t.i.c.
 12a:	6b 00                                               k.

0000012c <usbDescriptorStringVendor>:
 12c:	18 03 41 00 74 00 6f 00 6d 00 20 00 54 00 72 00     ..A.t.o.m. .T.r.
 13c:	61 00 63 00 65 00 a9 00                             a.c.e...

00000144 <usbDescriptorString0>:
 144:	04 03 09 04                                         ....

00000148 <__ctors_end>:
 148:	11 24       	eor	r1, r1
 14a:	1f be       	out	0x3f, r1	; 63
 14c:	cf ef       	ldi	r28, 0xFF	; 255
 14e:	d0 e1       	ldi	r29, 0x10	; 16
 150:	de bf       	out	0x3e, r29	; 62
 152:	cd bf       	out	0x3d, r28	; 61

00000154 <__do_copy_data>:
 154:	11 e0       	ldi	r17, 0x01	; 1
 156:	a0 e0       	ldi	r26, 0x00	; 0
 158:	b1 e0       	ldi	r27, 0x01	; 1
 15a:	ec ec       	ldi	r30, 0xCC	; 204
 15c:	f7 e0       	ldi	r31, 0x07	; 7
 15e:	02 c0       	rjmp	.+4      	; 0x164 <__do_copy_data+0x10>
 160:	05 90       	lpm	r0, Z+
 162:	0d 92       	st	X+, r0
 164:	a2 30       	cpi	r26, 0x02	; 2
 166:	b1 07       	cpc	r27, r17
 168:	d9 f7       	brne	.-10     	; 0x160 <__do_copy_data+0xc>

0000016a <__do_clear_bss>:
 16a:	21 e0       	ldi	r18, 0x01	; 1
 16c:	a2 e0       	ldi	r26, 0x02	; 2
 16e:	b1 e0       	ldi	r27, 0x01	; 1
 170:	01 c0       	rjmp	.+2      	; 0x174 <.do_clear_bss_start>

00000172 <.do_clear_bss_loop>:
 172:	1d 92       	st	X+, r1

00000174 <.do_clear_bss_start>:
 174:	af 33       	cpi	r26, 0x3F	; 63
 176:	b2 07       	cpc	r27, r18
 178:	e1 f7       	brne	.-8      	; 0x172 <.do_clear_bss_loop>
 17a:	0e 94 38 02 	call	0x470	; 0x470 <main>
 17e:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <_exit>

00000182 <__bad_interrupt>:
 182:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000186 <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
 186:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
 188:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
 18a:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
 18c:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
 18e:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
 190:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
 192:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
 194:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
 196:	09 c0       	rjmp	.+18     	; 0x1aa <usbCrcLoopEntry>

00000198 <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
 198:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
 19a:	82 27       	eor	r24, r18

0000019c <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 19c:	97 95       	ror	r25
    ror     resCrcL
 19e:	87 95       	ror	r24
    brcs    usbCrcNoXor
 1a0:	10 f0       	brcs	.+4      	; 0x1a6 <usbCrcNoXor>
    eor     resCrcL, polyL
 1a2:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 1a4:	95 27       	eor	r25, r21

000001a6 <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 1a6:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 1a8:	c8 f3       	brcs	.-14     	; 0x19c <usbCrcBitLoop>

000001aa <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 1aa:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 1ac:	a8 f3       	brcs	.-22     	; 0x198 <usbCrcByteLoop>

000001ae <usbCrcReady>:
usbCrcReady:
    ret
 1ae:	08 95       	ret

000001b0 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 1b0:	ea df       	rcall	.-44     	; 0x186 <usbCrc16>
    st      ptr+, resCrcL
 1b2:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 1b4:	9d 93       	st	X+, r25
    ret
 1b6:	08 95       	ret

000001b8 <__vector_1>:
;max allowable interrupt latency: 34 cycles -> max 25 cycles interrupt disable
;max stack usage: [ret(2), YL, SREG, YH, shift, x1, x2, x3, cnt, x4] = 11 bytes
;Numbers in brackets are maximum cycles since SOF.
USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], YH, shift, x1, x2, x3, cnt
    push    YL              ;2 [35] push only what is necessary to sync with edge ASAP
 1b8:	cf 93       	push	r28
    in      YL, SREG        ;1 [37]
 1ba:	cf b7       	in	r28, 0x3f	; 63
    push    YL              ;2 [39]
 1bc:	cf 93       	push	r28

000001be <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 1be:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 1c0:	4c 9b       	sbis	0x09, 4	; 9
    brne    waitForJ        ; just make sure we have ANY timeout
 1c2:	e9 f7       	brne	.-6      	; 0x1be <waitForJ>

000001c4 <waitForK>:
waitForK:
;The following code results in a sampling window of 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS
 1c4:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 1c6:	09 c0       	rjmp	.+18     	; 0x1da <foundK>
    sbis    USBIN, USBMINUS
 1c8:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 1ca:	07 c0       	rjmp	.+14     	; 0x1da <foundK>
    sbis    USBIN, USBMINUS
 1cc:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 1ce:	05 c0       	rjmp	.+10     	; 0x1da <foundK>
    sbis    USBIN, USBMINUS
 1d0:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 1d2:	03 c0       	rjmp	.+6      	; 0x1da <foundK>
    sbis    USBIN, USBMINUS
 1d4:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    foundK
 1d6:	01 c0       	rjmp	.+2      	; 0x1da <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 1d8:	a3 c0       	rjmp	.+326    	; 0x320 <sofError>

000001da <foundK>:
foundK:
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 4 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    YH                  ;2 [2]
 1da:	df 93       	push	r29
    lds     YL, usbInputBufOffset;2 [4]
 1dc:	c0 91 22 01 	lds	r28, 0x0122
    clr     YH                  ;1 [5]
 1e0:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));1 [6]
 1e2:	c7 5d       	subi	r28, 0xD7	; 215
    sbci    YH, hi8(-(usbRxBuf));1 [7]
 1e4:	de 4f       	sbci	r29, 0xFE	; 254

    sbis    USBIN, USBMINUS ;1 [8] we want two bits K [sample 1 cycle too early]
 1e6:	4c 9b       	sbis	0x09, 4	; 9
    rjmp    haveTwoBitsK    ;2 [10]
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <haveTwoBitsK>
    pop     YH              ;2 [11] undo the push from before
 1ea:	df 91       	pop	r29
    rjmp    waitForK        ;2 [13] this was not the end of sync, retry
 1ec:	eb cf       	rjmp	.-42     	; 0x1c4 <waitForK>

000001ee <haveTwoBitsK>:
haveTwoBitsK:
;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
    push    shift           ;2 [16]
 1ee:	2f 93       	push	r18
    push    x1              ;2 [12]
 1f0:	0f 93       	push	r16
    push    x2              ;2 [14]
 1f2:	1f 93       	push	r17

    in      x1, USBIN       ;1 [17] <-- sample bit 0
 1f4:	09 b1       	in	r16, 0x09	; 9
    ldi     shift, 0xff     ;1 [18]
 1f6:	2f ef       	ldi	r18, 0xFF	; 255
    bst     x1, USBMINUS    ;1 [19]
 1f8:	04 fb       	bst	r16, 4
    bld     shift, 0        ;1 [20]
 1fa:	20 f9       	bld	r18, 0
    push    x3              ;2 [22]
 1fc:	4f 93       	push	r20
    push    cnt             ;2 [24]
 1fe:	3f 93       	push	r19
    
    in      x2, USBIN       ;1 [25] <-- sample bit 1
 200:	19 b1       	in	r17, 0x09	; 9
    ser     x3              ;1 [26] [inserted init instruction]
 202:	4f ef       	ldi	r20, 0xFF	; 255
    eor     x1, x2          ;1 [27]
 204:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;1 [28]
 206:	04 fb       	bst	r16, 4
    bld     shift, 1        ;1 [29]
 208:	21 f9       	bld	r18, 1
    ldi     cnt, USB_BUFSIZE;1 [30] [inserted init instruction]
 20a:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit2          ;2 [32]
 20c:	31 c0       	rjmp	.+98     	; 0x270 <rxbit2>

0000020e <unstuff0>:
;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------

unstuff0:               ;1 (branch taken)
    andi    x3, ~0x01   ;1 [15]
 20e:	4e 7f       	andi	r20, 0xFE	; 254
    mov     x1, x2      ;1 [16] x2 contains last sampled (stuffed) bit
 210:	01 2f       	mov	r16, r17
    in      x2, USBIN   ;1 [17] <-- sample bit 1 again
 212:	19 b1       	in	r17, 0x09	; 9
    ori     shift, 0x01 ;1 [18]
 214:	21 60       	ori	r18, 0x01	; 1
    rjmp    didUnstuff0 ;2 [20]
 216:	28 c0       	rjmp	.+80     	; 0x268 <didUnstuff0>

00000218 <unstuff1>:

unstuff1:               ;1 (branch taken)
    mov     x2, x1      ;1 [21] x1 contains last sampled (stuffed) bit
 218:	10 2f       	mov	r17, r16
    andi    x3, ~0x02   ;1 [22]
 21a:	4d 7f       	andi	r20, 0xFD	; 253
    ori     shift, 0x02 ;1 [23]
 21c:	22 60       	ori	r18, 0x02	; 2
    nop                 ;1 [24]
 21e:	00 00       	nop
    in      x1, USBIN   ;1 [25] <-- sample bit 2 again
 220:	09 b1       	in	r16, 0x09	; 9
    rjmp    didUnstuff1 ;2 [27]
 222:	29 c0       	rjmp	.+82     	; 0x276 <didUnstuff1>

00000224 <unstuff2>:

unstuff2:               ;1 (branch taken)
    andi    x3, ~0x04   ;1 [29]
 224:	4b 7f       	andi	r20, 0xFB	; 251
    ori     shift, 0x04 ;1 [30]
 226:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2      ;1 [31] x2 contains last sampled (stuffed) bit
 228:	01 2f       	mov	r16, r17
    nop                 ;1 [32]
 22a:	00 00       	nop
    in      x2, USBIN   ;1 [33] <-- sample bit 3
 22c:	19 b1       	in	r17, 0x09	; 9
    rjmp    didUnstuff2 ;2 [35]
 22e:	2b c0       	rjmp	.+86     	; 0x286 <didUnstuff2>

00000230 <unstuff3>:

unstuff3:               ;1 (branch taken)
    in      x2, USBIN   ;1 [34] <-- sample stuffed bit 3 [one cycle too late]
 230:	19 b1       	in	r17, 0x09	; 9
    andi    x3, ~0x08   ;1 [35]
 232:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08 ;1 [36]
 234:	28 60       	ori	r18, 0x08	; 8
    rjmp    didUnstuff3 ;2 [38]
 236:	2a c0       	rjmp	.+84     	; 0x28c <didUnstuff3>

00000238 <unstuff4>:

unstuff4:               ;1 (branch taken)
    andi    x3, ~0x10   ;1 [40]
 238:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN   ;1 [41] <-- sample stuffed bit 4
 23a:	09 b1       	in	r16, 0x09	; 9
    ori     shift, 0x10 ;1 [42]
 23c:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4 ;2 [44]
 23e:	2c c0       	rjmp	.+88     	; 0x298 <didUnstuff4>

00000240 <unstuff5>:

unstuff5:               ;1 (branch taken)
    andi    x3, ~0x20   ;1 [48]
 240:	4f 7d       	andi	r20, 0xDF	; 223
    in      x2, USBIN   ;1 [49] <-- sample stuffed bit 5
 242:	19 b1       	in	r17, 0x09	; 9
    ori     shift, 0x20 ;1 [50]
 244:	20 62       	ori	r18, 0x20	; 32
    rjmp    didUnstuff5 ;2 [52]
 246:	2f c0       	rjmp	.+94     	; 0x2a6 <didUnstuff5>

00000248 <unstuff6>:

unstuff6:               ;1 (branch taken)
    andi    x3, ~0x40   ;1 [56]
 248:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN   ;1 [57] <-- sample stuffed bit 6
 24a:	09 b1       	in	r16, 0x09	; 9
    ori     shift, 0x40 ;1 [58]
 24c:	20 64       	ori	r18, 0x40	; 64
    rjmp    didUnstuff6 ;2 [60]
 24e:	32 c0       	rjmp	.+100    	; 0x2b4 <didUnstuff6>

00000250 <rxLoop>:
; bit 4:    none
; bit 5:    none
; bit 6:    none
; bit 7:    jump, eor
rxLoop:
    eor     x3, shift   ;1 [0] reconstruct: x3 is 0 at bit locations we changed, 1 at others
 250:	42 27       	eor	r20, r18
    in      x1, USBIN   ;1 [1] <-- sample bit 0
 252:	09 b1       	in	r16, 0x09	; 9
    st      y+, x3      ;2 [3] store data
 254:	49 93       	st	Y+, r20
    ser     x3          ;1 [4]
 256:	4f ef       	ldi	r20, 0xFF	; 255
    nop                 ;1 [5]
 258:	00 00       	nop
    eor     x2, x1      ;1 [6]
 25a:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [7]
 25c:	14 fb       	bst	r17, 4
    bld     shift, 0    ;1 [8]
 25e:	20 f9       	bld	r18, 0
    in      x2, USBIN   ;1 [9] <-- sample bit 1 (or possibly bit 0 stuffed)
 260:	19 b1       	in	r17, 0x09	; 9
    andi    x2, USBMASK ;1 [10]
 262:	14 71       	andi	r17, 0x14	; 20
    breq    se0         ;1 [11] SE0 check for bit 1
 264:	c9 f1       	breq	.+114    	; 0x2d8 <se0>
    andi    shift, 0xf9 ;1 [12]
 266:	29 7f       	andi	r18, 0xF9	; 249

00000268 <didUnstuff0>:
didUnstuff0:
    breq    unstuff0    ;1 [13]
 268:	91 f2       	breq	.-92     	; 0x20e <unstuff0>
    eor     x1, x2      ;1 [14]
 26a:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [15]
 26c:	04 fb       	bst	r16, 4
    bld     shift, 1    ;1 [16]
 26e:	21 f9       	bld	r18, 1

00000270 <rxbit2>:
rxbit2:
    in      x1, USBIN   ;1 [17] <-- sample bit 2 (or possibly bit 1 stuffed)
 270:	09 b1       	in	r16, 0x09	; 9
    andi    shift, 0xf3 ;1 [18]
 272:	23 7f       	andi	r18, 0xF3	; 243
    breq    unstuff1    ;1 [19] do remaining work for bit 1
 274:	89 f2       	breq	.-94     	; 0x218 <unstuff1>

00000276 <didUnstuff1>:
didUnstuff1:
    subi    cnt, 1      ;1 [20]
 276:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow    ;1 [21] loop control
 278:	58 f1       	brcs	.+86     	; 0x2d0 <overflow>
    eor     x2, x1      ;1 [22]
 27a:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [23]
 27c:	14 fb       	bst	r17, 4
    bld     shift, 2    ;1 [24]
 27e:	22 f9       	bld	r18, 2
    in      x2, USBIN   ;1 [25] <-- sample bit 3 (or possibly bit 2 stuffed)
 280:	19 b1       	in	r17, 0x09	; 9
    andi    shift, 0xe7 ;1 [26]
 282:	27 7e       	andi	r18, 0xE7	; 231
    breq    unstuff2    ;1 [27]
 284:	79 f2       	breq	.-98     	; 0x224 <unstuff2>

00000286 <didUnstuff2>:
didUnstuff2:
    eor     x1, x2      ;1 [28]
 286:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [29]
 288:	04 fb       	bst	r16, 4
    bld     shift, 3    ;1 [30]
 28a:	23 f9       	bld	r18, 3

0000028c <didUnstuff3>:
didUnstuff3:
    andi    shift, 0xcf ;1 [31]
 28c:	2f 7c       	andi	r18, 0xCF	; 207
    breq    unstuff3    ;1 [32]
 28e:	81 f2       	breq	.-96     	; 0x230 <unstuff3>
    in      x1, USBIN   ;1 [33] <-- sample bit 4
 290:	09 b1       	in	r16, 0x09	; 9
    eor     x2, x1      ;1 [34]
 292:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [35]
 294:	14 fb       	bst	r17, 4
    bld     shift, 4    ;1 [36]
 296:	24 f9       	bld	r18, 4

00000298 <didUnstuff4>:
didUnstuff4:
    andi    shift, 0x9f ;1 [37]
 298:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4    ;1 [38]
 29a:	71 f2       	breq	.-100    	; 0x238 <unstuff4>
    nop2                ;2 [40]
 29c:	00 c0       	rjmp	.+0      	; 0x29e <didUnstuff4+0x6>
    in      x2, USBIN   ;1 [41] <-- sample bit 5
 29e:	19 b1       	in	r17, 0x09	; 9
    eor     x1, x2      ;1 [42]
 2a0:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [43]
 2a2:	04 fb       	bst	r16, 4
    bld     shift, 5    ;1 [44]
 2a4:	25 f9       	bld	r18, 5

000002a6 <didUnstuff5>:
didUnstuff5:
    andi    shift, 0x3f ;1 [45]
 2a6:	2f 73       	andi	r18, 0x3F	; 63
    breq    unstuff5    ;1 [46]
 2a8:	59 f2       	breq	.-106    	; 0x240 <unstuff5>
    nop2                ;2 [48]
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <didUnstuff5+0x6>
    in      x1, USBIN   ;1 [49] <-- sample bit 6
 2ac:	09 b1       	in	r16, 0x09	; 9
    eor     x2, x1      ;1 [50]
 2ae:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [51]
 2b0:	14 fb       	bst	r17, 4
    bld     shift, 6    ;1 [52]
 2b2:	26 f9       	bld	r18, 6

000002b4 <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0x02 ;1 [53]
 2b4:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6    ;1 [54]
 2b6:	40 f2       	brcs	.-112    	; 0x248 <unstuff6>
    nop2                ;2 [56]
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <didUnstuff6+0x6>
    in      x2, USBIN   ;1 [57] <-- sample bit 7
 2ba:	19 b1       	in	r17, 0x09	; 9
    eor     x1, x2      ;1 [58]
 2bc:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [59]
 2be:	04 fb       	bst	r16, 4
    bld     shift, 7    ;1 [60]
 2c0:	27 f9       	bld	r18, 7

000002c2 <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0x04 ;1 [61]
 2c2:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop      ;2 [63] loop control
 2c4:	28 f6       	brcc	.-118    	; 0x250 <rxLoop>

000002c6 <unstuff7>:
unstuff7:
    andi    x3, ~0x80   ;1 [63]
 2c6:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80 ;1 [64]
 2c8:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN   ;1 [65] <-- sample stuffed bit 7
 2ca:	19 b1       	in	r17, 0x09	; 9
    nop                 ;1 [66]
 2cc:	00 00       	nop
    rjmp    didUnstuff7 ;2 [68]
 2ce:	f9 cf       	rjmp	.-14     	; 0x2c2 <didUnstuff7>

000002d0 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 2d0:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 2d2:	1c bb       	out	0x1c, r17	; 28

000002d4 <ignorePacket>:
ignorePacket:
    clr     token
 2d4:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 2d6:	19 c0       	rjmp	.+50     	; 0x30a <handleSetupOrOut>

000002d8 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 2d8:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 2da:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 2dc:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 2de:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 2e0:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 2e2:	1c bb       	out	0x1c, r17	; 28
    ld      token, y            ;[11]
 2e4:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 2e6:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 2e8:	f9 f0       	breq	.+62     	; 0x328 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 2ea:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 2ec:	e9 f0       	breq	.+58     	; 0x328 <handleData>
    lds     shift, usbDeviceAddr;[17]
 2ee:	20 91 20 01 	lds	r18, 0x0120
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 2f2:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 2f4:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 2f6:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 2f8:	ed cf       	rjmp	.-38     	; 0x2d4 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
 2fa:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
 2fc:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
 2fe:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 300:	41 f1       	breq	.+80     	; 0x352 <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 302:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 304:	11 f0       	breq	.+4      	; 0x30a <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 306:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 308:	29 f7       	brne	.-54     	; 0x2d4 <ignorePacket>

0000030a <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 30a:	00 93 27 01 	sts	0x0127, r16

0000030e <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 30e:	3f 91       	pop	r19
 310:	4f 91       	pop	r20
 312:	1f 91       	pop	r17
 314:	0f 91       	pop	r16
 316:	2f 91       	pop	r18
 318:	df 91       	pop	r29
    USB_LOAD_PENDING(YL)        ;[49]
 31a:	cc b3       	in	r28, 0x1c	; 28
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 31c:	c0 fd       	sbrc	r28, 0
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 31e:	4f cf       	rjmp	.-354    	; 0x1be <waitForJ>

00000320 <sofError>:
sofError:
    POP_RETI                    ;macro call
 320:	cf 91       	pop	r28
 322:	cf bf       	out	0x3f, r28	; 63
 324:	cf 91       	pop	r28
    reti
 326:	18 95       	reti

00000328 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 328:	20 91 27 01 	lds	r18, 0x0127
    tst     shift               ;[20]
 32c:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 32e:	79 f3       	breq	.-34     	; 0x30e <doReturn>
    lds     x2, usbRxLen        ;[22]
 330:	10 91 25 01 	lds	r17, 0x0125
    tst     x2                  ;[24]
 334:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 336:	69 f5       	brne	.+90     	; 0x392 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 338:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 33a:	6a f1       	brmi	.+90     	; 0x396 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 33c:	30 93 25 01 	sts	0x0125, r19
    sts     usbRxToken, shift   ;[30]
 340:	20 93 21 01 	sts	0x0121, r18
    lds     x2, usbInputBufOffset;[32] swap buffers
 344:	10 91 22 01 	lds	r17, 0x0122
    ldi     cnt, USB_BUFSIZE    ;[34]
 348:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 34a:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 34c:	30 93 22 01 	sts	0x0122, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 350:	22 c0       	rjmp	.+68     	; 0x396 <sendAckAndReti>

00000352 <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 352:	00 91 25 01 	lds	r16, 0x0125
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 356:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 358:	e4 f4       	brge	.+56     	; 0x392 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 35a:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
 35c:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
 35e:	49 f4       	brne	.+18     	; 0x372 <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 360:	30 91 01 01 	lds	r19, 0x0101
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 364:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 366:	19 c0       	rjmp	.+50     	; 0x39a <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 368:	00 93 01 01 	sts	0x0101, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
 36c:	c9 e0       	ldi	r28, 0x09	; 9
    ldi     YH, hi8(usbTxBuf)   ;[44]
 36e:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 370:	18 c0       	rjmp	.+48     	; 0x3a2 <usbSendAndReti>

00000372 <handleIn1>:
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
    breq    handleIn3           ;[39]
#endif
    lds     cnt, usbTxLen1      ;[40]
 372:	30 91 14 01 	lds	r19, 0x0114
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
 376:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
 378:	10 c0       	rjmp	.+32     	; 0x39a <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
 37a:	00 93 14 01 	sts	0x0114, r16
    ldi     YL, lo8(usbTxBuf1)  ;[46]
 37e:	c5 e1       	ldi	r28, 0x15	; 21
    ldi     YH, hi8(usbTxBuf1)  ;[47]
 380:	d1 e0       	ldi	r29, 0x01	; 1
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
 382:	0f c0       	rjmp	.+30     	; 0x3a2 <usbSendAndReti>

00000384 <stuffN1Delay>:
;----------------------------------------------------------------------------

txByteLoop:
txBitloop:
stuffN1Delay:                   ;     [03]
    ror     shift               ;[-5] [11] [59]
 384:	27 95       	ror	r18
    brcc    doExorN1            ;[-4]      [60]
 386:	a8 f4       	brcc	.+42     	; 0x3b2 <doExorN1>
    subi    x4, 1               ;[-3]
 388:	51 50       	subi	r21, 0x01	; 1
    brne    commonN1            ;[-2]
 38a:	a9 f4       	brne	.+42     	; 0x3b6 <commonN1>
    lsl     shift               ;[-1] compensate ror after rjmp stuffDelay
 38c:	22 0f       	add	r18, r18
    nop                         ;[00] stuffing consists of just waiting 8 cycles
 38e:	00 00       	nop
    rjmp    stuffN1Delay        ;[01] after ror, C bit is reliably clear
 390:	f9 cf       	rjmp	.-14     	; 0x384 <stuffN1Delay>

00000392 <sendNakAndReti>:

sendNakAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_NAK      ;1 [-18]
 392:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    usbSendX3           ;2 [-16]
 394:	03 c0       	rjmp	.+6      	; 0x39c <usbSendX3>

00000396 <sendAckAndReti>:
sendAckAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_ACK      ;1 [-18]
 396:	42 ed       	ldi	r20, 0xD2	; 210
    rjmp    usbSendX3           ;2 [-16]
 398:	01 c0       	rjmp	.+2      	; 0x39c <usbSendX3>

0000039a <sendCntAndReti>:
sendCntAndReti:                 ;0 [-17] 17 cycles until SOP
    mov     x3, cnt             ;1 [-16]
 39a:	43 2f       	mov	r20, r19

0000039c <usbSendX3>:
usbSendX3:                      ;0 [-16]
    ldi     YL, 20              ;1 [-15] 'x3' is R20
 39c:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0               ;1 [-14]
 39e:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2              ;1 [-13]
 3a0:	32 e0       	ldi	r19, 0x02	; 2

000003a2 <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte
;uses: x1...x2, x4, shift, cnt, Y [x1 = mirror USBOUT, x2 = USBMASK, x4 = bitstuff cnt]
;Numbers in brackets are time since first bit of sync pattern is sent (start of instruction)
usbSendAndReti:
    in      x2, USBDDR          ;[-12] 12 cycles until SOP
 3a2:	1a b1       	in	r17, 0x0a	; 10
    ori     x2, USBMASK         ;[-11]
 3a4:	14 61       	ori	r17, 0x14	; 20
    sbi     USBOUT, USBMINUS    ;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 3a6:	5c 9a       	sbi	0x0b, 4	; 11
    out     USBDDR, x2          ;[-8] <--- acquire bus
 3a8:	1a b9       	out	0x0a, r17	; 10
    in      x1, USBOUT          ;[-7] port mirror for tx loop
 3aa:	0b b1       	in	r16, 0x0b	; 11
    ldi     shift, 0x40         ;[-6] sync byte is first byte sent (we enter loop after ror)
 3ac:	20 e4       	ldi	r18, 0x40	; 64
    ldi     x2, USBMASK         ;[-5]
 3ae:	14 e1       	ldi	r17, 0x14	; 20
    push    x4                  ;[-4]
 3b0:	5f 93       	push	r21

000003b2 <doExorN1>:
doExorN1:
    eor     x1, x2              ;[-2] [06] [62]
 3b2:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[-1] [07] [63]
 3b4:	56 e0       	ldi	r21, 0x06	; 6

000003b6 <commonN1>:
commonN1:
stuffN2Delay:
    out     USBOUT, x1          ;[00] [08] [64] <--- set bit
 3b6:	0b b9       	out	0x0b, r16	; 11
    ror     shift               ;[01]
 3b8:	27 95       	ror	r18
    brcc    doExorN2            ;[02]
 3ba:	20 f4       	brcc	.+8      	; 0x3c4 <doExorN2>
    subi    x4, 1               ;[03]
 3bc:	51 50       	subi	r21, 0x01	; 1
    brne    commonN2            ;[04]
 3be:	21 f4       	brne	.+8      	; 0x3c8 <commonN2>
    lsl     shift               ;[05] compensate ror after rjmp stuffDelay
 3c0:	22 0f       	add	r18, r18
    rjmp    stuffN2Delay        ;[06] after ror, C bit is reliably clear
 3c2:	f9 cf       	rjmp	.-14     	; 0x3b6 <commonN1>

000003c4 <doExorN2>:
doExorN2:
    eor     x1, x2              ;[04] [12]
 3c4:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[05] [13]
 3c6:	56 e0       	ldi	r21, 0x06	; 6

000003c8 <commonN2>:
commonN2:
    nop                         ;[06] [14]
 3c8:	00 00       	nop
    subi    cnt, 171            ;[07] [15] trick: (3 * 171) & 0xff = 1
 3ca:	3b 5a       	subi	r19, 0xAB	; 171
    out     USBOUT, x1          ;[08] [16] <--- set bit
 3cc:	0b b9       	out	0x0b, r16	; 11
    brcs    txBitloop           ;[09]      [25] [41]
 3ce:	d0 f2       	brcs	.-76     	; 0x384 <stuffN1Delay>

000003d0 <stuff6Delay>:

stuff6Delay:
    ror     shift               ;[42] [50]
 3d0:	27 95       	ror	r18
    brcc    doExor6             ;[43]
 3d2:	28 f4       	brcc	.+10     	; 0x3de <doExor6>
    subi    x4, 1               ;[44]
 3d4:	51 50       	subi	r21, 0x01	; 1
    brne    common6             ;[45]
 3d6:	29 f4       	brne	.+10     	; 0x3e2 <common6>
    lsl     shift               ;[46] compensate ror after rjmp stuffDelay
 3d8:	22 0f       	add	r18, r18
    nop                         ;[47] stuffing consists of just waiting 8 cycles
 3da:	00 00       	nop
    rjmp    stuff6Delay         ;[48] after ror, C bit is reliably clear
 3dc:	f9 cf       	rjmp	.-14     	; 0x3d0 <stuff6Delay>

000003de <doExor6>:
doExor6:
    eor     x1, x2              ;[45] [53]
 3de:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[46]
 3e0:	56 e0       	ldi	r21, 0x06	; 6

000003e2 <common6>:
common6:
stuff7Delay:
    ror     shift               ;[47] [55]
 3e2:	27 95       	ror	r18
    out     USBOUT, x1          ;[48] <--- set bit
 3e4:	0b b9       	out	0x0b, r16	; 11
    brcc    doExor7             ;[49]
 3e6:	20 f4       	brcc	.+8      	; 0x3f0 <doExor7>
    subi    x4, 1               ;[50]
 3e8:	51 50       	subi	r21, 0x01	; 1
    brne    common7             ;[51]
 3ea:	21 f4       	brne	.+8      	; 0x3f4 <common7>
    lsl     shift               ;[52] compensate ror after rjmp stuffDelay
 3ec:	22 0f       	add	r18, r18
    rjmp    stuff7Delay         ;[53] after ror, C bit is reliably clear
 3ee:	f9 cf       	rjmp	.-14     	; 0x3e2 <common6>

000003f0 <doExor7>:
doExor7:
    eor     x1, x2              ;[51] [59]
 3f0:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[52]
 3f2:	56 e0       	ldi	r21, 0x06	; 6

000003f4 <common7>:
common7:
    ld      shift, y+           ;[53]
 3f4:	29 91       	ld	r18, Y+
    tst     cnt                 ;[55]
 3f6:	33 23       	and	r19, r19
    out     USBOUT, x1          ;[56] <--- set bit
 3f8:	0b b9       	out	0x0b, r16	; 11
    brne    txByteLoop          ;[57]
 3fa:	21 f6       	brne	.-120    	; 0x384 <stuffN1Delay>

;make SE0:
    cbr     x1, USBMASK         ;[58] prepare SE0 [spec says EOP may be 15 to 18 cycles]
 3fc:	0b 7e       	andi	r16, 0xEB	; 235
    lds     x2, usbNewDeviceAddr;[59]
 3fe:	10 91 26 01 	lds	r17, 0x0126
    lsl     x2                  ;[61] we compare with left shifted address
 402:	11 0f       	add	r17, r17
    subi    YL, 2 + 20          ;[62] Only assign address on data packets, not ACK/NAK in x3
 404:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0               ;[63]
 406:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1          ;[00] <-- out SE0 -- from now 2 bits = 16 cycles until bus idle
 408:	0b b9       	out	0x0b, r16	; 11
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign      ;[01]
 40a:	11 f0       	breq	.+4      	; 0x410 <skipAddrAssign>
    sts     usbDeviceAddr, x2   ; if not skipped: SE0 is one cycle longer
 40c:	10 93 20 01 	sts	0x0120, r17

00000410 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[03] int0 occurred during TX -- clear pending flag
 410:	11 e0       	ldi	r17, 0x01	; 1
    USB_STORE_PENDING(x2)       ;[04]
 412:	1c bb       	out	0x1c, r17	; 28
    ori     x1, USBIDLE         ;[05]
 414:	00 61       	ori	r16, 0x10	; 16
    in      x2, USBDDR          ;[06]
 416:	1a b1       	in	r17, 0x0a	; 10
    cbr     x2, USBMASK         ;[07] set both pins to input
 418:	1b 7e       	andi	r17, 0xEB	; 235
    mov     x3, x1              ;[08]
 41a:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK         ;[09] configure no pullup on both pins
 41c:	4b 7e       	andi	r20, 0xEB	; 235
    pop     x4                  ;[10]
 41e:	5f 91       	pop	r21
    nop2                        ;[12]
 420:	00 c0       	rjmp	.+0      	; 0x422 <skipAddrAssign+0x12>
    nop2                        ;[14]
 422:	00 c0       	rjmp	.+0      	; 0x424 <skipAddrAssign+0x14>
    out     USBOUT, x1          ;[16] <-- out J (idle) -- end of SE0 (EOP signal)
 424:	0b b9       	out	0x0b, r16	; 11
    out     USBDDR, x2          ;[17] <-- release bus now
 426:	1a b9       	out	0x0a, r17	; 10
    out     USBOUT, x3          ;[18] <-- ensure no pull-up resistors are active
 428:	4b b9       	out	0x0b, r20	; 11
    rjmp    doReturn
 42a:	71 cf       	rjmp	.-286    	; 0x30e <doReturn>

0000042c <usbFunctionSetup>:
//DAF

/* ------------------------------------------------------------------------- */

usbMsgLen_t usbFunctionSetup(uchar data[8])
{
 42c:	fc 01       	movw	r30, r24
	usbRequest_t	*rq = (void *)data;
	
    usbMsgPtr = reportBuffer;
 42e:	83 e0       	ldi	r24, 0x03	; 3
 430:	91 e0       	ldi	r25, 0x01	; 1
 432:	90 93 24 01 	sts	0x0124, r25
 436:	80 93 23 01 	sts	0x0123, r24
	
    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS)	// class request type
 43a:	80 81       	ld	r24, Z
 43c:	80 76       	andi	r24, 0x60	; 96
 43e:	80 32       	cpi	r24, 0x20	; 32
 440:	a9 f4       	brne	.+42     	; 0x46c <usbFunctionSetup+0x40>
	{
        if(rq->bRequest == USBRQ_HID_GET_REPORT)	  // wValue: ReportType (highbyte), ReportID (lowbyte)
 442:	81 81       	ldd	r24, Z+1	; 0x01
 444:	81 30       	cpi	r24, 0x01	; 1
 446:	81 f0       	breq	.+32     	; 0x468 <usbFunctionSetup+0x3c>
		{
            // we only have one report type, so don't look at wValue
            DBG1(0x21,rq,8);
			return sizeof(reportBuffer);
        }
		else if(rq->bRequest == USBRQ_HID_GET_IDLE)
 448:	82 30       	cpi	r24, 0x02	; 2
 44a:	41 f4       	brne	.+16     	; 0x45c <usbFunctionSetup+0x30>
		{
            usbMsgPtr = &idleRate;
 44c:	82 e0       	ldi	r24, 0x02	; 2
 44e:	91 e0       	ldi	r25, 0x01	; 1
 450:	90 93 24 01 	sts	0x0124, r25
 454:	80 93 23 01 	sts	0x0123, r24
			DBG1(0x22,rq,8);
            return 1;
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	08 95       	ret
        }
		else if(rq->bRequest == USBRQ_HID_SET_IDLE)
 45c:	8a 30       	cpi	r24, 0x0A	; 10
 45e:	31 f4       	brne	.+12     	; 0x46c <usbFunctionSetup+0x40>
		{
            DBG1(0x23,rq,8);
			idleRate = rq->wValue.bytes[1];
 460:	83 81       	ldd	r24, Z+3	; 0x03
 462:	80 93 02 01 	sts	0x0102, r24
 466:	02 c0       	rjmp	.+4      	; 0x46c <usbFunctionSetup+0x40>
	{
        if(rq->bRequest == USBRQ_HID_GET_REPORT)	  // wValue: ReportType (highbyte), ReportID (lowbyte)
		{
            // we only have one report type, so don't look at wValue
            DBG1(0x21,rq,8);
			return sizeof(reportBuffer);
 468:	83 e0       	ldi	r24, 0x03	; 3
 46a:	08 95       	ret
			}
			break;
		default:
			break;
	}
	return 0;
 46c:	80 e0       	ldi	r24, 0x00	; 0
}
 46e:	08 95       	ret

00000470 <main>:
    uchar Btnstate = 0;
    uchar LastBtnstate = 0;
	uchar LastKeyPress = 0;
	uchar KeyPressed = 0;
 	odDebugInit();
	ENC_InitEncoder();
 470:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <ENC_InitEncoder>
    usbInit();
 474:	0e 94 d7 03 	call	0x7ae	; 0x7ae <usbInit>
    usbDeviceDisconnect();  
 478:	54 9a       	sbi	0x0a, 4	; 10
    uchar i = 0;
 47a:	80 e0       	ldi	r24, 0x00	; 0
    while(--i){             
 47c:	81 50       	subi	r24, 0x01	; 1
 47e:	39 f0       	breq	.+14     	; 0x48e <main+0x1e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 480:	e7 eb       	ldi	r30, 0xB7	; 183
 482:	fb e0       	ldi	r31, 0x0B	; 11
 484:	31 97       	sbiw	r30, 0x01	; 1
 486:	f1 f7       	brne	.-4      	; 0x484 <main+0x14>
 488:	00 c0       	rjmp	.+0      	; 0x48a <main+0x1a>
 48a:	00 00       	nop
 48c:	f7 cf       	rjmp	.-18     	; 0x47c <main+0xc>
        _delay_ms(1);

    }
    
    usbDeviceConnect();     
 48e:	54 98       	cbi	0x0a, 4	; 10

    sei();                  
 490:	78 94       	sei
	reportBuffer[0] = 1;  // ReportID = 1
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	80 93 03 01 	sts	0x0103, r24
	reportBuffer[2] = 0;  
 498:	10 92 05 01 	sts	0x0105, r1
int main(void)
{
    uchar encstate;
    uchar Btnstate = 0;
    uchar LastBtnstate = 0;
	uchar LastKeyPress = 0;
 49c:	10 e0       	ldi	r17, 0x00	; 0

int main(void)
{
    uchar encstate;
    uchar Btnstate = 0;
    uchar LastBtnstate = 0;
 49e:	00 e0       	ldi	r16, 0x00	; 0
	reportBuffer[0] = 1;  // ReportID = 1
	reportBuffer[2] = 0;  
    DBG1(0x00, 0, 0);
	while(1)
	{
      usbPoll();          
 4a0:	0e 94 ce 02 	call	0x59c	; 0x59c <usbPoll>
      ENC_PollEncoder();
 4a4:	0e 94 83 02 	call	0x506	; 0x506 <ENC_PollEncoder>
	  
      ///////////////////////////////////////////////
      
      KeyPressed = 0;
	  encstate = ENC_GetStateEncoder();
 4a8:	0e 94 9f 02 	call	0x53e	; 0x53e <ENC_GetStateEncoder>
      if (LEFT_SPIN == encstate)
 4ac:	8f 3f       	cpi	r24, 0xFF	; 255
 4ae:	21 f0       	breq	.+8      	; 0x4b8 <main+0x48>
      {
         KeyPressed = 0xea;
      }
      else if (RIGHT_SPIN == encstate)
 4b0:	81 30       	cpi	r24, 0x01	; 1
 4b2:	21 f4       	brne	.+8      	; 0x4bc <main+0x4c>
      {
         KeyPressed = 0xe9;
 4b4:	c9 ee       	ldi	r28, 0xE9	; 233
 4b6:	03 c0       	rjmp	.+6      	; 0x4be <main+0x4e>
      
      KeyPressed = 0;
	  encstate = ENC_GetStateEncoder();
      if (LEFT_SPIN == encstate)
      {
         KeyPressed = 0xea;
 4b8:	ca ee       	ldi	r28, 0xEA	; 234
 4ba:	01 c0       	rjmp	.+2      	; 0x4be <main+0x4e>
      usbPoll();          
      ENC_PollEncoder();
	  
      ///////////////////////////////////////////////
      
      KeyPressed = 0;
 4bc:	c0 e0       	ldi	r28, 0x00	; 0
      }
      else if (RIGHT_SPIN == encstate)
      {
         KeyPressed = 0xe9;
      }
	  Btnstate = ENC_GetBtnState();
 4be:	0e 94 a4 02 	call	0x548	; 0x548 <ENC_GetBtnState>
 4c2:	d8 2f       	mov	r29, r24
	  if (Btnstate != LastBtnstate)
 4c4:	80 17       	cp	r24, r16
 4c6:	21 f0       	breq	.+8      	; 0x4d0 <main+0x60>
	  {
	    if (Btnstate != 1) KeyPressed = 0xe2;				
 4c8:	81 30       	cpi	r24, 0x01	; 1
 4ca:	19 f0       	breq	.+6      	; 0x4d2 <main+0x62>
 4cc:	c2 ee       	ldi	r28, 0xE2	; 226
 4ce:	01 c0       	rjmp	.+2      	; 0x4d2 <main+0x62>
 4d0:	d0 2f       	mov	r29, r16
		LastBtnstate = Btnstate;
	  }	
        
	  if(LastKeyPress != KeyPressed){
 4d2:	1c 13       	cpse	r17, r28
 4d4:	03 c0       	rjmp	.+6      	; 0x4dc <main+0x6c>
 4d6:	1c 2f       	mov	r17, r28
 4d8:	0d 2f       	mov	r16, r29
 4da:	e2 cf       	rjmp	.-60     	; 0x4a0 <main+0x30>
		 DBG1(0x01, reportBuffer, 3);
		 if (usbInterruptIsReady()){
 4dc:	80 91 14 01 	lds	r24, 0x0114
 4e0:	84 fd       	sbrc	r24, 4
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <main+0x78>
 4e4:	c1 2f       	mov	r28, r17
 4e6:	f7 cf       	rjmp	.-18     	; 0x4d6 <main+0x66>
			LastKeyPress = KeyPressed;
			reportBuffer[1] = KeyPressed;
 4e8:	c0 93 04 01 	sts	0x0104, r28
			DBG1(0x01, reportBuffer, 3);
			/* use last key and not current key status in order to avoid lost
             changes in key status. */
			usbSetInterrupt(reportBuffer, sizeof(reportBuffer));
 4ec:	63 e0       	ldi	r22, 0x03	; 3
 4ee:	83 e0       	ldi	r24, 0x03	; 3
 4f0:	91 e0       	ldi	r25, 0x01	; 1
 4f2:	0e 94 ab 02 	call	0x556	; 0x556 <usbSetInterrupt>
 4f6:	ef cf       	rjmp	.-34     	; 0x4d6 <main+0x66>

000004f8 <ENC_InitEncoder>:
volatile unsigned char bufEnc = 0; //encoder buffer

//__________________________________________
void ENC_InitEncoder(void)
{
  ClearBit(DDR_Enc, Pin1_Enc); //input
 4f8:	08 98       	cbi	0x01, 0	; 1
  ClearBit(DDR_Enc, Pin2_Enc);
 4fa:	09 98       	cbi	0x01, 1	; 1
  ClearBit(DDR_Enc, Btn_Enc);
 4fc:	0a 98       	cbi	0x01, 2	; 1
  SetBit(PORT_Enc, Pin1_Enc);	//turn on pull up
 4fe:	10 9a       	sbi	0x02, 0	; 2
  SetBit(PORT_Enc, Pin2_Enc);
 500:	11 9a       	sbi	0x02, 1	; 2
  SetBit(PORT_Enc, Btn_Enc);
 502:	12 9a       	sbi	0x02, 2	; 2
 504:	08 95       	ret

00000506 <ENC_PollEncoder>:
static unsigned char stateEnc; 	
unsigned char tmp;  
unsigned char currentState = 0;

//check state of pins
if ((PIN_Enc & (1<<Pin1_Enc))!= 0) {SetBit(currentState,0);}
 506:	80 b1       	in	r24, 0x00	; 0
 508:	28 2f       	mov	r18, r24
 50a:	21 70       	andi	r18, 0x01	; 1
if ((PIN_Enc & (1<<Pin2_Enc))!= 0) {SetBit(currentState,1);}
 50c:	01 99       	sbic	0x00, 1	; 0
 50e:	22 60       	ori	r18, 0x02	; 2

tmp = stateEnc;
 510:	90 91 06 01 	lds	r25, 0x0106
if (currentState == (tmp & b00000011)) return;
 514:	89 2f       	mov	r24, r25
 516:	83 70       	andi	r24, 0x03	; 3
 518:	28 17       	cp	r18, r24
 51a:	81 f0       	breq	.+32     	; 0x53c <ENC_PollEncoder+0x36>

tmp = (tmp<<2)|currentState;
 51c:	34 e0       	ldi	r19, 0x04	; 4
 51e:	93 9f       	mul	r25, r19
 520:	c0 01       	movw	r24, r0
 522:	11 24       	eor	r1, r1
 524:	82 2b       	or	r24, r18
stateEnc = tmp;
 526:	80 93 06 01 	sts	0x0106, r24

if (tmp == b11100001) bufEnc = LEFT_SPIN;
 52a:	81 3e       	cpi	r24, 0xE1	; 225
 52c:	11 f4       	brne	.+4      	; 0x532 <ENC_PollEncoder+0x2c>
 52e:	8f ef       	ldi	r24, 0xFF	; 255
 530:	03 c0       	rjmp	.+6      	; 0x538 <ENC_PollEncoder+0x32>
if (tmp == b11010010) bufEnc = RIGHT_SPIN;
 532:	82 3d       	cpi	r24, 0xD2	; 210
 534:	19 f4       	brne	.+6      	; 0x53c <ENC_PollEncoder+0x36>
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	80 93 07 01 	sts	0x0107, r24
 53c:	08 95       	ret

0000053e <ENC_GetStateEncoder>:
}

//_____________________________________________
unsigned char ENC_GetStateEncoder(void)
{
  unsigned char tmp = bufEnc;
 53e:	80 91 07 01 	lds	r24, 0x0107
  bufEnc = 0;
 542:	10 92 07 01 	sts	0x0107, r1
  return tmp;
}
 546:	08 95       	ret

00000548 <ENC_GetBtnState>:
unsigned char ENC_GetBtnState(void)
{
  
  return  (PIN_Enc & (1<<Btn_Enc))?0:1 ;
 548:	80 b1       	in	r24, 0x00	; 0
 54a:	82 fb       	bst	r24, 2
 54c:	88 27       	eor	r24, r24
 54e:	80 f9       	bld	r24, 0
}
 550:	91 e0       	ldi	r25, 0x01	; 1
 552:	89 27       	eor	r24, r25
 554:	08 95       	ret

00000556 <usbSetInterrupt>:
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 556:	cf 93       	push	r28
 558:	c6 2f       	mov	r28, r22

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
 55a:	20 91 14 01 	lds	r18, 0x0114
 55e:	24 ff       	sbrs	r18, 4
 560:	07 c0       	rjmp	.+14     	; 0x570 <usbSetInterrupt+0x1a>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
 562:	30 91 15 01 	lds	r19, 0x0115
 566:	28 e8       	ldi	r18, 0x88	; 136
 568:	23 27       	eor	r18, r19
 56a:	20 93 15 01 	sts	0x0115, r18
 56e:	03 c0       	rjmp	.+6      	; 0x576 <usbSetInterrupt+0x20>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 570:	2a e5       	ldi	r18, 0x5A	; 90
 572:	20 93 14 01 	sts	0x0114, r18
 576:	dc 01       	movw	r26, r24
    txStatus->len = len + 4;    /* len must be given including sync byte */
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
 578:	e6 e1       	ldi	r30, 0x16	; 22
 57a:	f1 e0       	ldi	r31, 0x01	; 1
 57c:	8c 2f       	mov	r24, r28
 57e:	8e 0f       	add	r24, r30
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
    }
    p = txStatus->buffer + 1;
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 580:	9d 91       	ld	r25, X+
 582:	91 93       	st	Z+, r25
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 584:	8e 13       	cpse	r24, r30
 586:	fc cf       	rjmp	.-8      	; 0x580 <usbSetInterrupt+0x2a>
    usbCrc16Append(&txStatus->buffer[1], len);
 588:	6c 2f       	mov	r22, r28
 58a:	86 e1       	ldi	r24, 0x16	; 22
 58c:	91 e0       	ldi	r25, 0x01	; 1
 58e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 592:	cc 5f       	subi	r28, 0xFC	; 252
 594:	c0 93 14 01 	sts	0x0114, r28
}

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
}
 598:	cf 91       	pop	r28
 59a:	08 95       	ret

0000059c <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 59c:	cf 93       	push	r28
 59e:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 5a0:	80 91 25 01 	lds	r24, 0x0125
 5a4:	83 50       	subi	r24, 0x03	; 3
    if(len >= 0){
 5a6:	87 fd       	sbrc	r24, 7
 5a8:	a9 c0       	rjmp	.+338    	; 0x6fc <usbPoll+0x160>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 5aa:	90 91 22 01 	lds	r25, 0x0122
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 5ae:	20 91 21 01 	lds	r18, 0x0121
 5b2:	2d 32       	cpi	r18, 0x2D	; 45
 5b4:	09 f0       	breq	.+2      	; 0x5b8 <usbPoll+0x1c>
 5b6:	a0 c0       	rjmp	.+320    	; 0x6f8 <usbPoll+0x15c>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 5b8:	88 30       	cpi	r24, 0x08	; 8
 5ba:	09 f0       	breq	.+2      	; 0x5be <usbPoll+0x22>
 5bc:	9d c0       	rjmp	.+314    	; 0x6f8 <usbPoll+0x15c>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 5be:	cc e0       	ldi	r28, 0x0C	; 12
 5c0:	d0 e0       	ldi	r29, 0x00	; 0
 5c2:	c9 1b       	sub	r28, r25
 5c4:	d1 09       	sbc	r29, r1
 5c6:	c7 5d       	subi	r28, 0xD7	; 215
 5c8:	de 4f       	sbci	r29, 0xFE	; 254
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 5ca:	83 ec       	ldi	r24, 0xC3	; 195
 5cc:	80 93 09 01 	sts	0x0109, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 5d0:	8a e5       	ldi	r24, 0x5A	; 90
 5d2:	80 93 01 01 	sts	0x0101, r24
        usbMsgFlags = 0;
 5d6:	10 92 08 01 	sts	0x0108, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
 5da:	88 81       	ld	r24, Y
 5dc:	80 76       	andi	r24, 0x60	; 96
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 5de:	21 f0       	breq	.+8      	; 0x5e8 <usbPoll+0x4c>
            replyLen = usbFunctionSetup(data);
 5e0:	ce 01       	movw	r24, r28
 5e2:	0e 94 16 02 	call	0x42c	; 0x42c <usbFunctionSetup>
 5e6:	7f c0       	rjmp	.+254    	; 0x6e6 <usbPoll+0x14a>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 5e8:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 5ea:	10 92 12 01 	sts	0x0112, r1
    SWITCH_START(rq->bRequest)
 5ee:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 5f0:	81 11       	cpse	r24, r1
 5f2:	06 c0       	rjmp	.+12     	; 0x600 <usbPoll+0x64>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 5f4:	10 92 13 01 	sts	0x0113, r1
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 5f8:	22 e1       	ldi	r18, 0x12	; 18
 5fa:	31 e0       	ldi	r19, 0x01	; 1
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
 5fc:	82 e0       	ldi	r24, 0x02	; 2
 5fe:	6f c0       	rjmp	.+222    	; 0x6de <usbPoll+0x142>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 600:	85 30       	cpi	r24, 0x05	; 5
 602:	19 f4       	brne	.+6      	; 0x60a <usbPoll+0x6e>
        usbNewDeviceAddr = value;
 604:	90 93 26 01 	sts	0x0126, r25
 608:	67 c0       	rjmp	.+206    	; 0x6d8 <usbPoll+0x13c>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 60a:	86 30       	cpi	r24, 0x06	; 6
 60c:	09 f0       	breq	.+2      	; 0x610 <usbPoll+0x74>
 60e:	4e c0       	rjmp	.+156    	; 0x6ac <usbPoll+0x110>
 610:	8b 81       	ldd	r24, Y+3	; 0x03
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 612:	81 30       	cpi	r24, 0x01	; 1
 614:	19 f4       	brne	.+6      	; 0x61c <usbPoll+0x80>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 616:	86 ee       	ldi	r24, 0xE6	; 230
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	29 c0       	rjmp	.+82     	; 0x66e <usbPoll+0xd2>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 61c:	82 30       	cpi	r24, 0x02	; 2
 61e:	19 f4       	brne	.+6      	; 0x626 <usbPoll+0x8a>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 620:	84 ec       	ldi	r24, 0xC4	; 196
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	1a c0       	rjmp	.+52     	; 0x65a <usbPoll+0xbe>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 626:	83 30       	cpi	r24, 0x03	; 3
 628:	41 f5       	brne	.+80     	; 0x67a <usbPoll+0xde>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
 62a:	91 11       	cpse	r25, r1
 62c:	08 c0       	rjmp	.+16     	; 0x63e <usbPoll+0xa2>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 62e:	84 e4       	ldi	r24, 0x44	; 68
 630:	91 e0       	ldi	r25, 0x01	; 1
 632:	90 93 24 01 	sts	0x0124, r25
 636:	80 93 23 01 	sts	0x0123, r24
 63a:	84 e0       	ldi	r24, 0x04	; 4
 63c:	33 c0       	rjmp	.+102    	; 0x6a4 <usbPoll+0x108>
        SWITCH_CASE(1)
 63e:	91 30       	cpi	r25, 0x01	; 1
 640:	41 f4       	brne	.+16     	; 0x652 <usbPoll+0xb6>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 642:	8c e2       	ldi	r24, 0x2C	; 44
 644:	91 e0       	ldi	r25, 0x01	; 1
 646:	90 93 24 01 	sts	0x0124, r25
 64a:	80 93 23 01 	sts	0x0123, r24
 64e:	88 e1       	ldi	r24, 0x18	; 24
 650:	29 c0       	rjmp	.+82     	; 0x6a4 <usbPoll+0x108>
        SWITCH_CASE(2)
 652:	92 30       	cpi	r25, 0x02	; 2
 654:	41 f4       	brne	.+16     	; 0x666 <usbPoll+0xca>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 656:	8a e0       	ldi	r24, 0x0A	; 10
 658:	91 e0       	ldi	r25, 0x01	; 1
 65a:	90 93 24 01 	sts	0x0124, r25
 65e:	80 93 23 01 	sts	0x0123, r24
 662:	82 e2       	ldi	r24, 0x22	; 34
 664:	1f c0       	rjmp	.+62     	; 0x6a4 <usbPoll+0x108>
        SWITCH_CASE(3)
 666:	93 30       	cpi	r25, 0x03	; 3
 668:	e1 f4       	brne	.+56     	; 0x6a2 <usbPoll+0x106>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_SERIAL_NUMBER, usbDescriptorStringSerialNumber)
 66a:	88 ef       	ldi	r24, 0xF8	; 248
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	90 93 24 01 	sts	0x0124, r25
 672:	80 93 23 01 	sts	0x0123, r24
 676:	82 e1       	ldi	r24, 0x12	; 18
 678:	15 c0       	rjmp	.+42     	; 0x6a4 <usbPoll+0x108>
                len = usbFunctionDescriptor(rq);
            }
        SWITCH_END
#endif  /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
#if USB_CFG_DESCR_PROPS_HID_REPORT  /* only support HID descriptors if enabled */
    SWITCH_CASE(USBDESCR_HID)       /* 0x21 */
 67a:	81 32       	cpi	r24, 0x21	; 33
 67c:	41 f4       	brne	.+16     	; 0x68e <usbPoll+0xf2>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID, usbDescriptorConfiguration + 18)
 67e:	86 ed       	ldi	r24, 0xD6	; 214
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	90 93 24 01 	sts	0x0124, r25
 686:	80 93 23 01 	sts	0x0123, r24
 68a:	89 e0       	ldi	r24, 0x09	; 9
 68c:	0b c0       	rjmp	.+22     	; 0x6a4 <usbPoll+0x108>
    SWITCH_CASE(USBDESCR_HID_REPORT)/* 0x22 */
 68e:	82 32       	cpi	r24, 0x22	; 34
 690:	41 f4       	brne	.+16     	; 0x6a2 <usbPoll+0x106>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_HID_REPORT, usbDescriptorHidReport)
 692:	8c e7       	ldi	r24, 0x7C	; 124
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	90 93 24 01 	sts	0x0124, r25
 69a:	80 93 23 01 	sts	0x0123, r24
 69e:	88 e4       	ldi	r24, 0x48	; 72
 6a0:	01 c0       	rjmp	.+2      	; 0x6a4 <usbPoll+0x108>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 6a2:	80 e0       	ldi	r24, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 6a4:	90 e4       	ldi	r25, 0x40	; 64
 6a6:	90 93 08 01 	sts	0x0108, r25
 6aa:	1d c0       	rjmp	.+58     	; 0x6e6 <usbPoll+0x14a>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 6ac:	88 30       	cpi	r24, 0x08	; 8
 6ae:	69 f0       	breq	.+26     	; 0x6ca <usbPoll+0x12e>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 6b0:	89 30       	cpi	r24, 0x09	; 9
 6b2:	19 f4       	brne	.+6      	; 0x6ba <usbPoll+0x11e>
        usbConfiguration = value;
 6b4:	90 93 28 01 	sts	0x0128, r25
 6b8:	0f c0       	rjmp	.+30     	; 0x6d8 <usbPoll+0x13c>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 6ba:	8a 30       	cpi	r24, 0x0A	; 10
 6bc:	49 f0       	breq	.+18     	; 0x6d0 <usbPoll+0x134>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 6be:	8b 30       	cpi	r24, 0x0B	; 11
 6c0:	59 f4       	brne	.+22     	; 0x6d8 <usbPoll+0x13c>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 6c2:	8b e4       	ldi	r24, 0x4B	; 75
 6c4:	80 93 15 01 	sts	0x0115, r24
 6c8:	07 c0       	rjmp	.+14     	; 0x6d8 <usbPoll+0x13c>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
 6ca:	28 e2       	ldi	r18, 0x28	; 40
 6cc:	31 e0       	ldi	r19, 0x01	; 1
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <usbPoll+0x138>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 6d0:	22 e1       	ldi	r18, 0x12	; 18
 6d2:	31 e0       	ldi	r19, 0x01	; 1
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	03 c0       	rjmp	.+6      	; 0x6de <usbPoll+0x142>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 6d8:	22 e1       	ldi	r18, 0x12	; 18
 6da:	31 e0       	ldi	r19, 0x01	; 1
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 6dc:	80 e0       	ldi	r24, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
 6de:	30 93 24 01 	sts	0x0124, r19
 6e2:	20 93 23 01 	sts	0x0123, r18
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 6e6:	9f 81       	ldd	r25, Y+7	; 0x07
 6e8:	91 11       	cpse	r25, r1
 6ea:	04 c0       	rjmp	.+8      	; 0x6f4 <usbPoll+0x158>
 6ec:	9e 81       	ldd	r25, Y+6	; 0x06
 6ee:	98 17       	cp	r25, r24
 6f0:	08 f4       	brcc	.+2      	; 0x6f4 <usbPoll+0x158>
 6f2:	89 2f       	mov	r24, r25
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 6f4:	80 93 00 01 	sts	0x0100, r24
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 6f8:	10 92 25 01 	sts	0x0125, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 6fc:	80 91 01 01 	lds	r24, 0x0101
 700:	84 ff       	sbrs	r24, 4
 702:	48 c0       	rjmp	.+144    	; 0x794 <usbPoll+0x1f8>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 704:	80 91 00 01 	lds	r24, 0x0100
 708:	8f 3f       	cpi	r24, 0xFF	; 255
 70a:	09 f4       	brne	.+2      	; 0x70e <usbPoll+0x172>
 70c:	43 c0       	rjmp	.+134    	; 0x794 <usbPoll+0x1f8>
 70e:	c8 2f       	mov	r28, r24
 710:	89 30       	cpi	r24, 0x09	; 9
 712:	08 f0       	brcs	.+2      	; 0x716 <usbPoll+0x17a>
 714:	c8 e0       	ldi	r28, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 716:	8c 1b       	sub	r24, r28
 718:	80 93 00 01 	sts	0x0100, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 71c:	90 91 09 01 	lds	r25, 0x0109
 720:	88 e8       	ldi	r24, 0x88	; 136
 722:	89 27       	eor	r24, r25
 724:	80 93 09 01 	sts	0x0109, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 728:	cc 23       	and	r28, r28
 72a:	39 f1       	breq	.+78     	; 0x77a <usbPoll+0x1de>
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
 72c:	80 91 23 01 	lds	r24, 0x0123
 730:	90 91 24 01 	lds	r25, 0x0124
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 734:	20 91 08 01 	lds	r18, 0x0108
 738:	26 ff       	sbrs	r18, 6
 73a:	0b c0       	rjmp	.+22     	; 0x752 <usbPoll+0x1b6>
 73c:	aa e0       	ldi	r26, 0x0A	; 10
 73e:	b1 e0       	ldi	r27, 0x01	; 1
 740:	fc 01       	movw	r30, r24
 742:	2c 2f       	mov	r18, r28
 744:	28 0f       	add	r18, r24
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 746:	34 91       	lpm	r19, Z
                    *data++ = c;
 748:	3d 93       	st	X+, r19
                    r++;
 74a:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
 74c:	2e 13       	cpse	r18, r30
 74e:	fb cf       	rjmp	.-10     	; 0x746 <usbPoll+0x1aa>
 750:	09 c0       	rjmp	.+18     	; 0x764 <usbPoll+0x1c8>
 752:	dc 01       	movw	r26, r24
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 754:	ea e0       	ldi	r30, 0x0A	; 10
 756:	f1 e0       	ldi	r31, 0x01	; 1
 758:	2c 2f       	mov	r18, r28
 75a:	2e 0f       	add	r18, r30
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
 75c:	3d 91       	ld	r19, X+
 75e:	31 93       	st	Z+, r19
                    r++;
                }while(--i);
 760:	2e 13       	cpse	r18, r30
 762:	fc cf       	rjmp	.-8      	; 0x75c <usbPoll+0x1c0>
 764:	2f ef       	ldi	r18, 0xFF	; 255
 766:	2c 0f       	add	r18, r28
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	2f 5f       	subi	r18, 0xFF	; 255
 76c:	3f 4f       	sbci	r19, 0xFF	; 255
 76e:	82 0f       	add	r24, r18
 770:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
 772:	90 93 24 01 	sts	0x0124, r25
 776:	80 93 23 01 	sts	0x0123, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 77a:	6c 2f       	mov	r22, r28
 77c:	8a e0       	ldi	r24, 0x0A	; 10
 77e:	91 e0       	ldi	r25, 0x01	; 1
 780:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 784:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 786:	cc 30       	cpi	r28, 0x0C	; 12
 788:	19 f0       	breq	.+6      	; 0x790 <usbPoll+0x1f4>
            usbMsgLen = USB_NO_MSG;
 78a:	8f ef       	ldi	r24, 0xFF	; 255
 78c:	80 93 00 01 	sts	0x0100, r24
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 790:	c0 93 01 01 	sts	0x0101, r28
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 794:	84 e1       	ldi	r24, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 796:	99 b1       	in	r25, 0x09	; 9
 798:	94 71       	andi	r25, 0x14	; 20
        if(usbLineStatus != 0)  /* SE0 has ended */
 79a:	31 f4       	brne	.+12     	; 0x7a8 <usbPoll+0x20c>
 79c:	81 50       	subi	r24, 0x01	; 1
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 79e:	d9 f7       	brne	.-10     	; 0x796 <usbPoll+0x1fa>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 7a0:	10 92 26 01 	sts	0x0126, r1
    usbDeviceAddr = 0;
 7a4:	10 92 20 01 	sts	0x0120, r1
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 7a8:	df 91       	pop	r29
 7aa:	cf 91       	pop	r28
 7ac:	08 95       	ret

000007ae <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 7ae:	e9 e6       	ldi	r30, 0x69	; 105
 7b0:	f0 e0       	ldi	r31, 0x00	; 0
 7b2:	80 81       	ld	r24, Z
 7b4:	82 60       	ori	r24, 0x02	; 2
 7b6:	80 83       	st	Z, r24
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 7b8:	e8 9a       	sbi	0x1d, 0	; 29
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 7ba:	e4 e1       	ldi	r30, 0x14	; 20
 7bc:	f1 e0       	ldi	r31, 0x01	; 1
 7be:	8b e4       	ldi	r24, 0x4B	; 75
 7c0:	81 83       	std	Z+1, r24	; 0x01
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 7c2:	8a e5       	ldi	r24, 0x5A	; 90
 7c4:	80 83       	st	Z, r24
 7c6:	08 95       	ret

000007c8 <_exit>:
 7c8:	f8 94       	cli

000007ca <__stop_program>:
 7ca:	ff cf       	rjmp	.-2      	; 0x7ca <__stop_program>
